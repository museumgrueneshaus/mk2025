---
export interface Props {
  title: string;
  isKiosk?: boolean;
}

const { title, isKiosk = false } = Astro.props;
---

<!DOCTYPE html>
<html lang="de">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="application-name" content="Museum Kiosk" />
    <meta name="apple-mobile-web-app-title" content="Museum Kiosk" />
    <meta name="theme-color" content="#000000" />
    <meta name="msapplication-TileColor" content="#000000" />
    <link rel="manifest" href="/manifest.json" />
    <title>{title}</title>
    
    <style>
      /* Prevent scrolling and selection on kiosk */
      {isKiosk && `
        body {
          overflow: hidden;
          user-select: none;
          -webkit-user-select: none;
          -webkit-touch-callout: none;
          cursor: none;
        }
        
        /* Hide scrollbars */
        ::-webkit-scrollbar {
          display: none;
        }
        
        /* Full screen */
        html, body {
          width: 100%;
          height: 100%;
          margin: 0;
          padding: 0;
        }
      `}
      
      /* Offline indicator */
      .offline-indicator {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background: #ff6b6b;
        color: white;
        padding: 10px 20px;
        border-radius: 5px;
        z-index: 9999;
        display: none;
      }
      
      body.offline .offline-indicator {
        display: block;
      }
    </style>
  </head>
  <body>
    <div class="offline-indicator">
      <span>Offline-Modus</span>
    </div>
    
    <slot />
    
    <script>
      // WLAN Status Check
      let isOnline = navigator.onLine;
      
      function updateOnlineStatus() {
        isOnline = navigator.onLine;
        document.body.classList.toggle('offline', !isOnline);
      }
      
      window.addEventListener('online', updateOnlineStatus);
      window.addEventListener('offline', updateOnlineStatus);
      updateOnlineStatus();
      
      // Auto-reload bei Verbindungsverlust
      if (window.location.pathname.startsWith('/viewer/')) {
        let retryCount = 0;
        
        setInterval(() => {
          if (!navigator.onLine) {
            retryCount++;
            if (retryCount > 60) { // Nach 5 Minuten
              window.location.reload();
            }
          } else {
            retryCount = 0;
          }
        }, 5000);
      }
      
      // Service Worker fÃ¼r Offline-Support
      if ('serviceWorker' in navigator) {
        navigator.serviceWorker.register('/sw.js');
      }
      
      // Prevent context menu on kiosk
      if (window.location.pathname.startsWith('/viewer/')) {
        document.addEventListener('contextmenu', e => e.preventDefault());
      }
    </script>
  </body>
</html>