---
export interface Props {
  config: any;
}

const { config } = Astro.props;
const images = config.content?.images || [];
const duration = config.settings?.duration || 5000;
const transition = config.settings?.transition || 'fade';
---

<div class="slideshow-container" data-duration={duration} data-transition={transition}>
  {images.map((image: string, index: number) => (
    <div class={`slide ${index === 0 ? 'active' : ''}`} data-index={index}>
      <img src={image} alt={`Slide ${index + 1}`} />
    </div>
  ))}
  
  <!-- Dots indicator -->
  {config.features?.dots !== false && (
    <div class="dots-container">
      {images.map((_: string, index: number) => (
        <span class={`dot ${index === 0 ? 'active' : ''}`} data-index={index}></span>
      ))}
    </div>
  )}
</div>

<style>
  .slideshow-container {
    position: relative;
    width: 100vw;
    height: 100vh;
    overflow: hidden;
    background: #000;
  }

  .slide {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    transition: opacity 1s ease-in-out;
  }

  .slide.active {
    opacity: 1;
  }

  .slide img {
    width: 100%;
    height: 100%;
    object-fit: contain;
  }

  .dots-container {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 10px;
    z-index: 10;
  }

  .dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.5);
    cursor: pointer;
    transition: background 0.3s;
  }

  .dot.active {
    background: rgba(255, 255, 255, 1);
  }

  /* Slide transition */
  .slideshow-container[data-transition="slide"] .slide {
    transform: translateX(100%);
    opacity: 1;
  }

  .slideshow-container[data-transition="slide"] .slide.active {
    transform: translateX(0);
  }

  .slideshow-container[data-transition="slide"] .slide.prev {
    transform: translateX(-100%);
  }
</style>

<script>
  const container = document.querySelector('.slideshow-container') as HTMLElement;
  const slides = container.querySelectorAll('.slide');
  const dots = container.querySelectorAll('.dot');
  const duration = parseInt(container.dataset.duration || '5000');
  
  let currentIndex = 0;
  let interval: NodeJS.Timeout;

  function showSlide(index: number) {
    // Remove active class from all
    slides.forEach(s => s.classList.remove('active', 'prev'));
    dots.forEach(d => d.classList.remove('active'));
    
    // Add prev class to current slide
    if (currentIndex !== index) {
      slides[currentIndex].classList.add('prev');
    }
    
    // Update current index
    currentIndex = index;
    
    // Add active class to new slide
    slides[currentIndex].classList.add('active');
    if (dots[currentIndex]) {
      dots[currentIndex].classList.add('active');
    }
  }

  function nextSlide() {
    const next = (currentIndex + 1) % slides.length;
    showSlide(next);
  }

  // Auto advance
  function startSlideshow() {
    interval = setInterval(nextSlide, duration);
  }

  function stopSlideshow() {
    clearInterval(interval);
  }

  // Start the slideshow
  startSlideshow();

  // Pause on hover (optional)
  container.addEventListener('mouseenter', stopSlideshow);
  container.addEventListener('mouseleave', startSlideshow);

  // Handle dot clicks
  dots.forEach((dot, index) => {
    dot.addEventListener('click', () => {
      stopSlideshow();
      showSlide(index);
      startSlideshow();
    });
  });
</script>