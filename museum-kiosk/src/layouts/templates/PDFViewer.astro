---
export interface Props {
  config: any;
}

const { config } = Astro.props;
const pdfs = config.content?.pdfs || [];
const defaultPdf = config.content?.defaultPdf || 0;
const showThumbnails = config.features?.thumbnails !== false;
const showNavigation = config.features?.navigation !== false;
---

<div class="pdf-viewer-container">
  <!-- PDF Selector (if multiple PDFs) -->
  {pdfs.length > 1 && (
    <div class="pdf-selector">
      <select id="pdf-select" class="pdf-dropdown">
        {pdfs.map((pdf: string, index: number) => (
          <option value={index} selected={index === defaultPdf}>
            {pdf.split('/').pop()?.replace('.pdf', '')}
          </option>
        ))}
      </select>
    </div>
  )}

  <!-- Main PDF Display -->
  <div class="pdf-display">
    <iframe 
      id="pdf-frame"
      src={pdfs[defaultPdf]}
      class="pdf-iframe"
      title="PDF Viewer"
    ></iframe>
    
    <!-- Alternative: PDF.js implementation -->
    <div id="pdf-canvas-container" style="display: none;">
      <canvas id="pdf-canvas"></canvas>
      
      {showNavigation && (
        <div class="pdf-controls">
          <button id="prev-page" class="control-btn">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="white">
              <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/>
            </svg>
          </button>
          <span class="page-info">
            <span id="current-page">1</span> / <span id="total-pages">1</span>
          </span>
          <button id="next-page" class="control-btn">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="white">
              <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"/>
            </svg>
          </button>
          
          <div class="zoom-controls">
            <button id="zoom-out" class="control-btn">âˆ’</button>
            <span id="zoom-level">100%</span>
            <button id="zoom-in" class="control-btn">+</button>
            <button id="zoom-fit" class="control-btn">Fit</button>
          </div>
        </div>
      )}
    </div>
  </div>

  <!-- Thumbnails (optional) -->
  {showThumbnails && (
    <div class="thumbnails-sidebar" id="thumbnails-sidebar">
      <!-- Generated by JavaScript for PDF.js -->
    </div>
  )}
</div>

<style>
  .pdf-viewer-container {
    display: flex;
    width: 100vw;
    height: 100vh;
    background: #333;
    position: relative;
  }

  .pdf-selector {
    position: absolute;
    top: 10px;
    left: 50%;
    transform: translateX(-50%);
    z-index: 100;
  }

  .pdf-dropdown {
    padding: 8px 16px;
    font-size: 16px;
    background: rgba(0, 0, 0, 0.8);
    color: white;
    border: 1px solid rgba(255, 255, 255, 0.3);
    border-radius: 4px;
    cursor: pointer;
  }

  .pdf-display {
    flex: 1;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .pdf-iframe {
    width: 100%;
    height: 100%;
    border: none;
  }

  #pdf-canvas-container {
    width: 100%;
    height: 100%;
    overflow: hidden;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 20px;
  }

  #pdf-canvas {
    max-width: 100%;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
  }

  .pdf-controls {
    position: fixed;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    align-items: center;
    gap: 20px;
    background: rgba(0, 0, 0, 0.8);
    padding: 10px 20px;
    border-radius: 30px;
    z-index: 100;
  }

  .control-btn {
    background: rgba(255, 255, 255, 0.1);
    border: none;
    color: white;
    padding: 8px 12px;
    border-radius: 4px;
    cursor: pointer;
    transition: background 0.3s;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 18px;
  }

  .control-btn:hover {
    background: rgba(255, 255, 255, 0.2);
  }

  .page-info {
    color: white;
    min-width: 80px;
    text-align: center;
  }

  .zoom-controls {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-left: 20px;
    padding-left: 20px;
    border-left: 1px solid rgba(255, 255, 255, 0.3);
  }

  #zoom-level {
    color: white;
    min-width: 50px;
    text-align: center;
  }

  .thumbnails-sidebar {
    width: 200px;
    background: rgba(0, 0, 0, 0.9);
    overflow-y: hidden;
    overflow-x: hidden;
  }
  
  /* Hide scrollbars */
  .thumbnails-sidebar::-webkit-scrollbar {
    display: none;
  }
  
  .thumbnails-sidebar {
    -ms-overflow-style: none;
    scrollbar-width: none;
    padding: 10px;
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  .pdf-thumbnail {
    width: 100%;
    padding: 5px;
    background: rgba(255, 255, 255, 0.1);
    border: 2px solid transparent;
    cursor: pointer;
    transition: all 0.3s;
  }

  .pdf-thumbnail:hover {
    background: rgba(255, 255, 255, 0.2);
  }

  .pdf-thumbnail.active {
    border-color: #4CAF50;
  }

  .pdf-thumbnail canvas {
    width: 100%;
    height: auto;
  }

  .pdf-thumbnail-number {
    text-align: center;
    color: white;
    margin-top: 5px;
    font-size: 12px;
  }
</style>

<script define:vars={{ pdfs }}>
  const container = document.querySelector('.pdf-viewer-container');
  const pdfSelect = document.getElementById('pdf-select');
  const pdfFrame = document.getElementById('pdf-frame');
  
  // Handle PDF selection
  if (pdfSelect) {
    pdfSelect.addEventListener('change', (e) => {
      const target = e.target as HTMLSelectElement;
      const index = parseInt(target.value);
      if (pdfFrame && pdfs[index]) {
        pdfFrame.src = pdfs[index];
      }
    });
  }

  // Touch gestures for page navigation
  let touchStartY = 0;
  let touchEndY = 0;

  container.addEventListener('touchstart', (e) => {
    touchStartY = e.changedTouches[0].screenY;
  }, { passive: true });

  container.addEventListener('touchend', (e) => {
    touchEndY = e.changedTouches[0].screenY;
    handleVerticalSwipe();
  }, { passive: true });

  function handleVerticalSwipe() {
    const swipeThreshold = 50;
    const diff = touchStartY - touchEndY;
    
    if (Math.abs(diff) > swipeThreshold) {
      // This would need PDF.js integration to actually change pages
      if (diff > 0) {
        console.log('Swipe up - next page');
      } else {
        console.log('Swipe down - previous page');
      }
    }
  }

  // For a full implementation, you would integrate PDF.js here
  // This would allow page-by-page rendering, thumbnails, and better control
  
  // Example PDF.js integration (would need to load the library):
  /*
  if (typeof pdfjsLib !== 'undefined') {
    pdfjsLib.GlobalWorkerOptions.workerSrc = '//cdnjs.cloudflare.com/ajax/libs/pdf.js/2.11.338/pdf.worker.min.js';
    
    let pdfDoc = null;
    let pageNum = 1;
    let pageRendering = false;
    let pageNumPending = null;
    let scale = 1.5;
    
    function renderPage(num) {
      // PDF.js rendering logic here
    }
    
    function queueRenderPage(num) {
      if (pageRendering) {
        pageNumPending = num;
      } else {
        renderPage(num);
      }
    }
    
    // Load PDF
    pdfjsLib.getDocument(pdfs[0]).promise.then(function(pdfDoc_) {
      pdfDoc = pdfDoc_;
      document.getElementById('total-pages').textContent = pdfDoc.numPages;
      renderPage(pageNum);
    });
  }
  */
</script>