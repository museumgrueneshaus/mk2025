---
export interface Props {
  config: any;
}

const { config } = Astro.props;
const url = config.content?.url || 'https://www.example.com';
const allowNavigation = config.features?.navigation !== false;
const refreshInterval = config.settings?.refreshInterval || 0; // in minutes, 0 = no refresh
---

<div class="external-url-container">
  {!allowNavigation && (
    <div class="url-header">
      <div class="url-display">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="#4CAF50">
          <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 17.93c-3.94-.49-7-3.85-7-7.93 0-.62.08-1.21.21-1.79L9 15v1c0 1.1.9 2 2 2v1.93zm6.9-2.54c-.26-.81-1-1.39-1.9-1.39h-1v-3c0-.55-.45-1-1-1H8v-2h2c.55 0 1-.45 1-1V7h2c1.1 0 2-.9 2-2v-.41c2.93 1.19 5 4.06 5 7.41 0 2.08-.8 3.97-2.1 5.39z"/>
        </svg>
        <span>{url}</span>
      </div>
      <button id="refresh-btn" class="refresh-button">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="white">
          <path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"/>
        </svg>
      </button>
    </div>
  )}
  
  <iframe 
    id="external-frame"
    src={url}
    class={allowNavigation ? 'iframe-full' : 'iframe-with-header'}
    title="External Content"
    frameborder="0"
  ></iframe>

  <!-- Loading Indicator -->
  <div id="loading-indicator" class="loading-indicator">
    <div class="spinner"></div>
    <p>Lade externe Inhalte...</p>
  </div>

  <!-- Error Message -->
  <div id="error-message" class="error-message" style="display: none;">
    <svg width="60" height="60" viewBox="0 0 24 24" fill="#f44336">
      <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"/>
    </svg>
    <h2>Verbindungsfehler</h2>
    <p>Die externe Seite konnte nicht geladen werden.</p>
    <button id="retry-btn" class="retry-button">Erneut versuchen</button>
  </div>
</div>

<style>
  .external-url-container {
    width: 100vw;
    height: 100vh;
    background: #f5f5f5;
    position: relative;
    display: flex;
    flex-direction: column;
  }

  .url-header {
    height: 50px;
    background: white;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0 20px;
  }

  .url-display {
    display: flex;
    align-items: center;
    gap: 10px;
    color: #333;
    font-size: 14px;
  }

  .refresh-button {
    padding: 8px 16px;
    background: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 5px;
    transition: background 0.3s;
  }

  .refresh-button:hover {
    background: #45a049;
  }

  .iframe-full {
    width: 100%;
    height: 100%;
    border: none;
  }

  .iframe-with-header {
    width: 100%;
    height: calc(100% - 50px);
    border: none;
  }

  .loading-indicator {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
    background: white;
    padding: 30px;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    z-index: 100;
  }

  .spinner {
    width: 50px;
    height: 50px;
    margin: 0 auto 20px;
    border: 4px solid #f3f3f3;
    border-top: 4px solid #4CAF50;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .error-message {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
    background: white;
    padding: 40px;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    z-index: 100;
  }

  .error-message h2 {
    color: #333;
    margin: 20px 0 10px;
  }

  .error-message p {
    color: #666;
    margin-bottom: 20px;
  }

  .retry-button {
    padding: 10px 20px;
    background: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
    transition: background 0.3s;
  }

  .retry-button:hover {
    background: #45a049;
  }

  /* Hide iframe while loading */
  .loading #external-frame {
    visibility: hidden;
  }
</style>

<script define:vars={{ url, refreshInterval }}>
  const iframe = document.getElementById('external-frame') as HTMLIFrameElement;
  const loadingIndicator = document.getElementById('loading-indicator');
  const errorMessage = document.getElementById('error-message');
  const refreshBtn = document.getElementById('refresh-btn');
  const retryBtn = document.getElementById('retry-btn');
  const container = document.querySelector('.external-url-container');

  // Hide loading indicator when iframe loads
  iframe?.addEventListener('load', () => {
    if (loadingIndicator) loadingIndicator.style.display = 'none';
    if (errorMessage) errorMessage.style.display = 'none';
    container?.classList.remove('loading');
  });

  // Handle iframe errors (limited due to CORS)
  iframe?.addEventListener('error', () => {
    if (loadingIndicator) loadingIndicator.style.display = 'none';
    if (errorMessage) errorMessage.style.display = 'block';
    container?.classList.remove('loading');
  });

  // Refresh button
  refreshBtn?.addEventListener('click', () => {
    reloadIframe();
  });

  // Retry button
  retryBtn?.addEventListener('click', () => {
    reloadIframe();
  });

  function reloadIframe() {
    if (loadingIndicator) loadingIndicator.style.display = 'block';
    if (errorMessage) errorMessage.style.display = 'none';
    container?.classList.add('loading');
    iframe.src = iframe.src;
  }

  // Auto-refresh if configured
  if (refreshInterval > 0) {
    setInterval(() => {
      reloadIframe();
    }, refreshInterval * 60 * 1000);
  }

  // Initial loading state
  container?.classList.add('loading');

  // Hide loading after timeout (fallback)
  setTimeout(() => {
    if (loadingIndicator?.style.display !== 'none') {
      loadingIndicator.style.display = 'none';
      container?.classList.remove('loading');
    }
  }, 5000);
</script>