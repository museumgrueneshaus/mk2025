---
import '../styles/mobile-clean.css';

export interface Props {
  title?: string;
  description?: string;
  activeTab?: 'home' | 'exhibits' | 'events' | 'map' | 'favorites';
}

const { 
  title = 'Museum Gr√ºnes Haus', 
  description = 'Digitales Museum Reutte',
  activeTab = 'home'
} = Astro.props;
---

<!DOCTYPE html>
<html lang="de">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, viewport-fit=cover" />
    <meta name="theme-color" content="#1a1a2e" />
    
    <!-- PWA Meta Tags -->
    <link rel="manifest" href="/manifest.json" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
    <meta name="apple-mobile-web-app-title" content="Museum GH" />
    <link rel="apple-touch-icon" href="/icons/icon-192.png" />
    
    <!-- Enhanced Mobile Optimization -->
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="application-name" content="Museum GH" />
    <meta name="msapplication-TileColor" content="#c4002f" />
    <meta name="msapplication-config" content="/browserconfig.xml" />
    
    <!-- Preload critical resources -->
    <link rel="preload" href="/sw-mobile.js" as="script" />
    <link rel="preload" href="/icons/icon-192.svg" as="image" />
    
    <title>{title}</title>
    
    <!-- PWA Service Worker Registration -->
    <script is:inline>
      // PWA Install functionality
      let deferredInstallPrompt = null;
      
      // Register service worker for PWA functionality
      if ('serviceWorker' in navigator) {
        window.addEventListener('load', async () => {
          try {
            const registration = await navigator.serviceWorker.register('/sw-mobile.js');
            console.log('üèõÔ∏è Museum Mobile SW registered:', registration.scope);
            
            // Handle service worker updates
            registration.addEventListener('updatefound', () => {
              const newWorker = registration.installing;
              newWorker.addEventListener('statechange', () => {
                if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                  // New version available
                  if (confirm('Neue Museum App Version verf√ºgbar! Jetzt aktualisieren?')) {
                    window.location.reload();
                  }
                }
              });
            });
          } catch (error) {
            console.error('Service Worker registration failed:', error);
          }
        });
      }

      // PWA Install Prompt Handler
      window.addEventListener('beforeinstallprompt', (e) => {
        e.preventDefault();
        deferredInstallPrompt = e;
        showInstallButton();
      });

      // Show install button in UI
      function showInstallButton() {
        setTimeout(() => {
          const installButton = document.getElementById('pwa-install-btn');
          if (installButton && !window.matchMedia('(display-mode: fullscreen)').matches) {
            installButton.style.display = 'flex';
            installButton.classList.add('install-available');
          }
        }, 2000); // Show after 2 seconds
      }

      // Handle PWA installation
      async function installPWA() {
        if (!deferredInstallPrompt) return;
        
        const installBtn = document.getElementById('pwa-install-btn');
        installBtn.style.transform = 'scale(0.95)';
        
        try {
          const result = await deferredInstallPrompt.prompt();
          console.log('PWA install prompt result:', result.outcome);
          
          if (result.outcome === 'accepted') {
            // Haptic feedback
            if ('vibrate' in navigator) navigator.vibrate([10, 5, 20]);
            
            // Hide install button with animation
            installBtn.classList.add('install-success');
            setTimeout(() => {
              installBtn.style.display = 'none';
            }, 1000);
          }
        } catch (error) {
          console.error('PWA installation failed:', error);
        } finally {
          installBtn.style.transform = '';
          deferredInstallPrompt = null;
        }
      }

      // Detect if already installed
      window.addEventListener('appinstalled', () => {
        console.log('üèõÔ∏è Museum PWA installed successfully!');
        const installBtn = document.getElementById('pwa-install-btn');
        if (installBtn) {
          installBtn.style.display = 'none';
        }
      });

      // Hide install button if already running as PWA
      window.addEventListener('DOMContentLoaded', () => {
        const isStandalone = window.matchMedia('(display-mode: fullscreen)').matches 
                           || window.matchMedia('(display-mode: standalone)').matches
                           || window.navigator.standalone === true;
        
        if (isStandalone) {
          const installBtn = document.getElementById('pwa-install-btn');
          if (installBtn) {
            installBtn.style.display = 'none';
          }
          console.log('üèõÔ∏è Museum PWA running in fullscreen mode');
        }
      });

      // Fullscreen orientation handling
      if ('orientation' in screen && 'lock' in screen.orientation) {
        window.addEventListener('DOMContentLoaded', () => {
          if (window.matchMedia('(display-mode: fullscreen)').matches) {
            try {
              screen.orientation.lock('portrait-primary');
            } catch (error) {
              console.log('Orientation lock not supported or failed');
            }
          }
        });
      }
    </script>
  </head>
  <body>
    <!-- Skip Links for Accessibility -->
    <a href="#main-content" class="skip-link">Zum Hauptinhalt springen</a>
    <a href="#navigation" class="skip-link">Zur Navigation springen</a>
    
    <div class="app-container">

      <!-- Main Content -->
      <main id="main-content" class="app-main page-enter" role="main" aria-label="Museum Hauptinhalt">
        <slot />
      </main>

      <!-- PWA Install Button -->
      <div id="pwa-install-btn" class="install-prompt" onclick="installPWA()" role="button" tabindex="0" 
           aria-label="Museum App installieren" aria-describedby="install-description">
        <div class="install-content">
          <div class="install-icon" aria-hidden="true">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="white">
              <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
            </svg>
          </div>
          <div class="install-text">
            <div class="install-title">Museum App</div>
            <div class="install-subtitle" id="install-description">Installieren</div>
          </div>
        </div>
      </div>

      <!-- Tab Bar Navigation -->
      <nav id="navigation" class="tab-bar glass" role="navigation" aria-label="Hauptnavigation">
        <a href="/mobile" class="tab-item {activeTab === 'home' ? 'active' : ''}" data-tab="home"
           aria-label="Startseite{activeTab === 'home' ? ' (aktuelle Seite)' : ''}"
           aria-current={activeTab === 'home' ? 'page' : undefined}>
          <div class="tab-icon" aria-hidden="true">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
              <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"/>
            </svg>
          </div>
          <span class="tab-label">Start</span>
        </a>
        
        <a href="/mobile/exhibits" class="tab-item {activeTab === 'exhibits' ? 'active' : ''}" data-tab="exhibits"
           aria-label="Exponate{activeTab === 'exhibits' ? ' (aktuelle Seite)' : ''}"
           aria-current={activeTab === 'exhibits' ? 'page' : undefined}>
          <div class="tab-icon" aria-hidden="true">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
              <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
            </svg>
          </div>
          <span class="tab-label">Exponate</span>
        </a>
        
        <a href="/mobile/scan" class="tab-item scan-button" data-tab="scan"
           aria-label="QR Code scannen{activeTab === 'scan' ? ' (aktuelle Seite)' : ''}"
           aria-current={activeTab === 'scan' ? 'page' : undefined}>
          <div class="scan-icon-wrapper">
            <div class="scan-icon" aria-hidden="true">
              <svg width="28" height="28" viewBox="0 0 24 24" fill="white">
                <path d="M3 5v4h2V5h4V3H5c-1.1 0-2 .9-2 2zm2 10H3v4c0 1.1.9 2 2 2h4v-2H5v-4zm14 4h-4v2h4c1.1 0 2-.9 2-2v-4h-2v4zm0-16h-4v2h4v4h2V5c0-1.1-.9-2-2-2z"/>
              </svg>
            </div>
          </div>
          <span class="tab-label">Scan</span>
        </a>
        
        <a href="/mobile/events" class="tab-item {activeTab === 'events' ? 'active' : ''}" data-tab="events"
           aria-label="Events{activeTab === 'events' ? ' (aktuelle Seite)' : ''}"
           aria-current={activeTab === 'events' ? 'page' : undefined}>
          <div class="tab-icon" aria-describedby="events-badge">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
              <path d="M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z"/>
            </svg>
            <div class="badge" id="events-badge" aria-label="3 neue Events">3</div>
          </div>
          <span class="tab-label">Events</span>
        </a>
        
        <a href="/mobile/favorites" class="tab-item {activeTab === 'favorites' ? 'active' : ''}" data-tab="favorites"
           aria-label="Favoriten{activeTab === 'favorites' ? ' (aktuelle Seite)' : ''}"
           aria-current={activeTab === 'favorites' ? 'page' : undefined}
           aria-describedby="favorites-count">
          <div class="tab-icon">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
              <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
            </svg>
            <div class="badge" id="favorites-count" aria-label="Favoriten Anzahl">0</div>
          </div>
          <span class="tab-label">Favoriten</span>
        </a>
      </nav>
    </div>
  </body>
</html>

<style>
  /* Import World-Class Museum Design System */
  @import '../styles/world-class-museum.css';

  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  body {
    font-family: var(--font-body);
    background: var(--gradient-dark);
    color: white;
    overscroll-behavior: none;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  .app-container {
    width: 100vw;
    height: 100vh;
    display: flex;
    flex-direction: column;
    position: relative;
    overflow: hidden;
  }



  /* Main Content */
  .app-main {
    flex: 1;
    padding-top: env(safe-area-inset-top);
    padding-bottom: calc(83px + env(safe-area-inset-bottom));
    overflow-y: auto;
    -webkit-overflow-scrolling: touch;
    scroll-behavior: smooth;
  }

  /* Tab Bar - World-Class Museum Design */
  .tab-bar {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    height: calc(83px + env(safe-area-inset-bottom));
    padding: 8px 0 env(safe-area-inset-bottom);
    display: flex;
    align-items: flex-start;
    justify-content: space-around;
    z-index: 999;
    background: var(--glass-surface);
    backdrop-filter: blur(var(--blur-strong));
    -webkit-backdrop-filter: blur(var(--blur-strong));
    border-top: var(--glass-border);
    box-shadow: var(--shadow-museum);
  }

  .tab-item {
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: var(--spacing-xs);
    padding: var(--spacing-sm);
    text-decoration: none;
    color: var(--color-text-muted);
    transition: all var(--transition-museum);
    position: relative;
    cursor: pointer;
    -webkit-tap-highlight-color: transparent;
    border-radius: var(--radius-md);
    backdrop-filter: blur(var(--blur-subtle));
    -webkit-backdrop-filter: blur(var(--blur-subtle));
  }

  .tab-item:hover {
    background: var(--glass-hover);
    color: var(--color-text-primary);
  }

  .tab-item.active {
    color: var(--moma-red);
    background: var(--glass-active);
    transform: translateY(-2px);
    box-shadow: var(--shadow-premium);
  }

  .tab-item.active::before {
    content: '';
    position: absolute;
    top: -2px;
    left: 50%;
    transform: translateX(-50%);
    width: 24px;
    height: 2px;
    background: linear-gradient(90deg, var(--moma-red), var(--tate-turquoise));
    border-radius: 2px;
    opacity: 1;
  }

  .tab-icon {
    position: relative;
    width: 28px;
    height: 28px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all var(--transition-museum);
    filter: drop-shadow(0 2px 8px rgba(0, 0, 0, 0.1));
  }

  .tab-item.active .tab-icon {
    transform: scale(1.15) translateY(-1px);
    filter: drop-shadow(0 4px 12px var(--moma-red-alpha));
  }

  .tab-item:active .tab-icon {
    transform: scale(0.95);
  }

  .tab-item.active .tab-icon svg {
    filter: drop-shadow(0 0 8px currentColor);
  }

  .tab-label {
    font-size: var(--text-xs);
    font-family: var(--font-display);
    font-weight: 500;
    letter-spacing: 0.5px;
    transition: all var(--transition-museum);
    text-transform: uppercase;
  }

  .tab-item.active .tab-label {
    font-weight: 600;
    text-shadow: 0 0 8px var(--moma-red-alpha);
  }

  /* Scan Button Special - World-Class Design */
  .scan-button {
    margin-top: -20px;
    z-index: 1;
  }

  .scan-icon-wrapper {
    width: 56px;
    height: 56px;
    background: var(--gradient-museum);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: var(--shadow-museum);
    transition: all var(--transition-museum);
    position: relative;
    overflow: hidden;
  }

  .scan-icon-wrapper::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(135deg, var(--moma-red), var(--tate-turquoise), var(--pompidou-blue));
    border-radius: 50%;
    opacity: 0;
    transition: opacity var(--transition-museum);
  }

  .scan-button:hover .scan-icon-wrapper::before,
  .scan-button.active .scan-icon-wrapper::before {
    opacity: 1;
  }

  .scan-button:active .scan-icon-wrapper {
    transform: scale(0.95);
    box-shadow: var(--shadow-premium);
  }

  .scan-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    z-index: 1;
  }

  /* Badges - World-Class Design */
  .badge {
    position: absolute;
    top: -4px;
    right: -4px;
    background: var(--gradient-museum);
    color: white;
    font-size: var(--text-xs);
    font-family: var(--font-display);
    font-weight: 600;
    padding: 2px 6px;
    border-radius: 10px;
    min-width: 18px;
    text-align: center;
    box-shadow: var(--shadow-premium);
    border: var(--glass-border);
    backdrop-filter: blur(var(--blur-subtle));
    -webkit-backdrop-filter: blur(var(--blur-subtle));
  }

  /* PWA Install Prompt - World-Class Design */
  .install-prompt {
    position: fixed;
    bottom: calc(100px + env(safe-area-inset-bottom));
    left: 50%;
    transform: translateX(-50%) translateY(100px);
    background: var(--glass-surface);
    backdrop-filter: blur(var(--blur-strong));
    -webkit-backdrop-filter: blur(var(--blur-strong));
    border: var(--glass-border);
    border-radius: var(--radius-lg);
    padding: var(--spacing-md);
    box-shadow: var(--shadow-museum);
    cursor: pointer;
    z-index: 1001;
    opacity: 0;
    transition: all var(--transition-museum);
    user-select: none;
    -webkit-tap-highlight-color: transparent;
    display: none;
    min-width: 280px;
  }

  .install-prompt.install-available {
    opacity: 1;
    transform: translateX(-50%) translateY(0);
  }

  .install-prompt:hover {
    background: var(--glass-hover);
    transform: translateX(-50%) translateY(-2px);
    box-shadow: var(--shadow-premium);
  }

  .install-prompt:active {
    transform: translateX(-50%) translateY(0) scale(0.98);
  }

  .install-prompt.install-success {
    background: linear-gradient(135deg, var(--tate-turquoise), var(--moma-red));
    opacity: 0;
    transform: translateX(-50%) translateY(-20px) scale(1.05);
  }

  .install-content {
    display: flex;
    align-items: center;
    gap: var(--spacing-md);
  }

  .install-icon {
    width: 40px;
    height: 40px;
    background: var(--gradient-museum);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
    box-shadow: var(--shadow-premium);
  }

  .install-text {
    flex: 1;
    color: var(--color-text-primary);
  }

  .install-title {
    font-family: var(--font-display);
    font-weight: 600;
    font-size: var(--text-sm);
    margin-bottom: 2px;
    color: white;
  }

  .install-subtitle {
    font-family: var(--font-body);
    font-size: var(--text-xs);
    color: var(--color-text-muted);
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  /* Page Transitions */
  @keyframes pageSlideIn {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  @keyframes pageSlideOut {
    from {
      transform: translateX(0);
      opacity: 1;
    }
    to {
      transform: translateX(-100%);
      opacity: 0;
    }
  }

  .page-transition-in {
    animation: pageSlideIn 0.3s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }

  .page-transition-out {
    animation: pageSlideOut 0.3s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }

  /* Safe Areas */
  @supports (padding: max(0px)) {
    .app-main {
      padding-top: env(safe-area-inset-top);
    }
  }

  /* Dark Mode Support */
  @media (prefers-color-scheme: light) {
    .app-container {
      background: white;
      color: var(--color-primary);
    }

    .tab-bar {
      background: rgba(255, 255, 255, 0.95);
      border-top-color: rgba(0, 0, 0, 0.1);
    }

    .tab-item {
      color: rgba(0, 0, 0, 0.4);
    }

    .tab-item.active {
      color: var(--color-primary);
    }
  }
</style>

<script>

  // Update favorites count
  function updateFavoritesCount() {
    const favorites = JSON.parse(localStorage.getItem('favorites') || '[]');
    const badge = document.getElementById('favorites-count');
    if (badge) {
      badge.textContent = favorites.length.toString();
      badge.style.display = favorites.length > 0 ? 'block' : 'none';
    }
  }

  updateFavoritesCount();
  window.addEventListener('storage', updateFavoritesCount);

  // Advanced Gesture Navigation System
  class GestureNavigation {
    constructor() {
      this.startX = 0;
      this.startY = 0;
      this.currentX = 0;
      this.currentY = 0;
      this.isDragging = false;
      this.velocity = { x: 0, y: 0 };
      this.lastTime = 0;
      this.lastX = 0;
      this.lastY = 0;
      
      this.init();
    }

    init() {
      const main = document.querySelector('.app-main');
      if (!main) return;

      // Touch events
      main.addEventListener('touchstart', this.handleTouchStart.bind(this), { passive: false });
      main.addEventListener('touchmove', this.handleTouchMove.bind(this), { passive: false });
      main.addEventListener('touchend', this.handleTouchEnd.bind(this), { passive: false });

      // Mouse events for desktop testing
      main.addEventListener('mousedown', this.handleMouseDown.bind(this));
      main.addEventListener('mousemove', this.handleMouseMove.bind(this));
      main.addEventListener('mouseup', this.handleMouseUp.bind(this));

      // Prevent overscroll on iOS
      document.addEventListener('touchmove', (e) => {
        if (e.scale !== 1) e.preventDefault();
      }, { passive: false });
    }

    handleTouchStart(e) {
      this.startGesture(e.touches[0].clientX, e.touches[0].clientY);
    }

    handleMouseDown(e) {
      this.startGesture(e.clientX, e.clientY);
    }

    startGesture(x, y) {
      this.startX = x;
      this.startY = y;
      this.currentX = x;
      this.currentY = y;
      this.lastX = x;
      this.lastY = y;
      this.isDragging = false;
      this.velocity = { x: 0, y: 0 };
      this.lastTime = Date.now();
    }

    handleTouchMove(e) {
      if (e.touches.length > 1) return;
      this.updateGesture(e.touches[0].clientX, e.touches[0].clientY);
      
      // Prevent scrolling during horizontal swipes
      const deltaX = Math.abs(this.currentX - this.startX);
      const deltaY = Math.abs(this.currentY - this.startY);
      if (deltaX > deltaY && deltaX > 10) {
        e.preventDefault();
      }
    }

    handleMouseMove(e) {
      if (!this.isDragging && (Math.abs(e.clientX - this.startX) > 5 || Math.abs(e.clientY - this.startY) > 5)) {
        this.isDragging = true;
      }
      if (this.isDragging) {
        this.updateGesture(e.clientX, e.clientY);
      }
    }

    updateGesture(x, y) {
      const now = Date.now();
      const deltaTime = now - this.lastTime;
      
      if (deltaTime > 0) {
        this.velocity.x = (x - this.lastX) / deltaTime;
        this.velocity.y = (y - this.lastY) / deltaTime;
      }

      this.currentX = x;
      this.currentY = y;
      this.lastX = x;
      this.lastY = y;
      this.lastTime = now;
      this.isDragging = true;

      // Visual feedback for horizontal swipes
      const deltaX = this.currentX - this.startX;
      const main = document.querySelector('.app-main');
      
      if (Math.abs(deltaX) > 20 && Math.abs(deltaX) > Math.abs(this.currentY - this.startY)) {
        const progress = Math.min(Math.abs(deltaX) / 100, 1);
        const direction = deltaX > 0 ? 'right' : 'left';
        
        main.style.transform = `translateX(${deltaX * 0.3}px)`;
        main.style.opacity = `${1 - progress * 0.2}`;
        
        // Add visual indicator
        if (!document.querySelector('.swipe-indicator')) {
          const indicator = document.createElement('div');
          indicator.className = 'swipe-indicator';
          indicator.innerHTML = direction === 'right' ? '‚Üê Zur√ºck' : 'Weiter ‚Üí';
          indicator.style.cssText = `
            position: fixed;
            top: 50%;
            ${direction === 'right' ? 'left: 20px' : 'right: 20px'};
            transform: translateY(-50%);
            background: rgba(0,0,0,0.8);
            color: white;
            padding: 12px 20px;
            border-radius: 25px;
            font-size: 14px;
            font-weight: 600;
            backdrop-filter: blur(10px);
            z-index: 1001;
            opacity: ${progress};
            transition: opacity 0.1s ease;
          `;
          document.body.appendChild(indicator);
        }
      }
    }

    handleTouchEnd(e) {
      this.endGesture();
    }

    handleMouseUp(e) {
      this.endGesture();
    }

    endGesture() {
      if (!this.isDragging) return;

      const deltaX = this.currentX - this.startX;
      const deltaY = this.currentY - this.startY;
      const main = document.querySelector('.app-main');
      
      // Remove visual feedback
      main.style.transform = '';
      main.style.opacity = '';
      
      const indicator = document.querySelector('.swipe-indicator');
      if (indicator) {
        indicator.remove();
      }

      // Determine gesture type
      const absX = Math.abs(deltaX);
      const absY = Math.abs(deltaY);
      const velocityThreshold = 0.5;
      const distanceThreshold = 80;

      // Haptic feedback
      if ('vibrate' in navigator && (absX > 30 || absY > 30)) {
        navigator.vibrate(5);
      }

      // Horizontal swipe navigation
      if (absX > absY && (absX > distanceThreshold || Math.abs(this.velocity.x) > velocityThreshold)) {
        if (deltaX > 0) {
          this.handleSwipeRight();
        } else {
          this.handleSwipeLeft();
        }
      }
      
      // Vertical swipe actions  
      else if (absY > absX && (absY > distanceThreshold || Math.abs(this.velocity.y) > velocityThreshold)) {
        if (deltaY < 0) {
          this.handleSwipeUp();
        } else {
          this.handleSwipeDown();
        }
      }

      this.isDragging = false;
    }

    handleSwipeRight() {
      // Go back in history or to previous page
      if (window.history.length > 1) {
        window.history.back();
      }
    }

    handleSwipeLeft() {
      // Navigate to next logical page or exhibit
      const currentPath = window.location.pathname;
      if (currentPath.includes('/mobile/exhibit/')) {
        // Could navigate to next exhibit
        console.log('Swipe left: Next exhibit');
      }
    }

    handleSwipeUp() {
      // Quick actions menu or search
      console.log('Swipe up: Quick actions');
    }

    handleSwipeDown() {
      // Refresh or pull-to-refresh
      if (window.scrollY === 0) {
        window.location.reload();
      }
    }
  }

  // Enhanced Keyboard Navigation & Accessibility
  class AccessibilityManager {
    constructor() {
      this.isKeyboardNavigation = false;
      this.init();
    }

    init() {
      // Detect keyboard navigation
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Tab' || e.key === 'Enter' || e.key === ' ' || e.key.startsWith('Arrow')) {
          this.enableKeyboardNavigation();
        }
      });

      document.addEventListener('mousedown', () => {
        this.disableKeyboardNavigation();
      });

      // PWA Install button keyboard support
      const installBtn = document.getElementById('pwa-install-btn');
      if (installBtn) {
        installBtn.addEventListener('keydown', (e) => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            installPWA();
          }
        });
      }

      // Tab navigation keyboard shortcuts
      document.addEventListener('keydown', (e) => {
        if (e.altKey) {
          switch(e.key) {
            case '1':
              e.preventDefault();
              this.navigateToTab('/mobile');
              break;
            case '2':
              e.preventDefault();
              this.navigateToTab('/mobile/exhibits');
              break;
            case '3':
              e.preventDefault();
              this.navigateToTab('/mobile/scan');
              break;
            case '4':
              e.preventDefault();
              this.navigateToTab('/mobile/events');
              break;
            case '5':
              e.preventDefault();
              this.navigateToTab('/mobile/favorites');
              break;
          }
        }

        // Arrow key navigation in tab bar
        if (document.activeElement?.closest('.tab-bar')) {
          const tabItems = Array.from(document.querySelectorAll('.tab-item'));
          const currentIndex = tabItems.indexOf(document.activeElement);
          
          switch(e.key) {
            case 'ArrowLeft':
              e.preventDefault();
              const prevIndex = currentIndex > 0 ? currentIndex - 1 : tabItems.length - 1;
              tabItems[prevIndex]?.focus();
              break;
            case 'ArrowRight':
              e.preventDefault();
              const nextIndex = currentIndex < tabItems.length - 1 ? currentIndex + 1 : 0;
              tabItems[nextIndex]?.focus();
              break;
            case 'Home':
              e.preventDefault();
              tabItems[0]?.focus();
              break;
            case 'End':
              e.preventDefault();
              tabItems[tabItems.length - 1]?.focus();
              break;
          }
        }
      });

      // Announce page changes to screen readers
      this.setupPageChangeAnnouncements();
    }

    enableKeyboardNavigation() {
      if (!this.isKeyboardNavigation) {
        document.body.classList.add('keyboard-nav-active');
        this.isKeyboardNavigation = true;
      }
    }

    disableKeyboardNavigation() {
      if (this.isKeyboardNavigation) {
        document.body.classList.remove('keyboard-nav-active');
        this.isKeyboardNavigation = false;
      }
    }

    navigateToTab(url) {
      const targetTab = document.querySelector(`[href="${url}"]`);
      if (targetTab) {
        targetTab.click();
        targetTab.focus();
        
        // Haptic feedback
        if ('vibrate' in navigator) {
          navigator.vibrate(10);
        }
      }
    }

    setupPageChangeAnnouncements() {
      // Create live region for announcements
      const liveRegion = document.createElement('div');
      liveRegion.setAttribute('aria-live', 'polite');
      liveRegion.setAttribute('aria-atomic', 'true');
      liveRegion.className = 'sr-only';
      liveRegion.id = 'page-announcements';
      document.body.appendChild(liveRegion);

      // Announce active tab changes
      const observer = new MutationObserver(() => {
        const activeTab = document.querySelector('.tab-item.active .tab-label');
        if (activeTab) {
          liveRegion.textContent = `Navigiert zu ${activeTab.textContent}`;
        }
      });

      observer.observe(document.body, { 
        childList: true, 
        subtree: true, 
        attributes: true, 
        attributeFilter: ['class'] 
      });
    }
  }

  // Initialize gesture navigation and accessibility
  document.addEventListener('DOMContentLoaded', () => {
    new GestureNavigation();
    new AccessibilityManager();
  });

  // Page transitions with gesture support
  document.querySelectorAll('.tab-item').forEach(tab => {
    tab.addEventListener('click', (e) => {
      if (!tab.classList.contains('active')) {
        const main = document.querySelector('.app-main');
        if (main) {
          main.classList.remove('page-enter');
          main.classList.add('page-transition-out');
          
          setTimeout(() => {
            // Navigation would happen here
          }, 300);
        }
      }
    });
  });

  // Enhanced haptic feedback
  if ('vibrate' in navigator) {
    // Tab interactions
    document.querySelectorAll('.tab-item').forEach(tab => {
      tab.addEventListener('click', () => {
        navigator.vibrate([10, 10, 20]);
      });
    });

    // Button interactions
    document.addEventListener('click', (e) => {
      if (e.target.matches('button, .button, .btn')) {
        navigator.vibrate(15);
      }
    });

    // Card interactions
    document.addEventListener('click', (e) => {
      if (e.target.closest('.museum-card, .exhibit-card, .action-card')) {
        navigator.vibrate([5, 5, 10]);
      }
    });
  }

  // Smooth page loading with stagger animations
  document.addEventListener('DOMContentLoaded', () => {
    // Add stagger animation to cards
    const cards = document.querySelectorAll('.museum-card, .exhibit-card, .action-card, .event-item');
    cards.forEach((card, index) => {
      card.classList.add('stagger-item');
      card.style.animationDelay = `${index * 0.1}s`;
    });
  });

  // Advanced image loading with progressive enhancement
  document.addEventListener('DOMContentLoaded', () => {
    const images = document.querySelectorAll('img');
    
    const imageObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target;
          const container = img.closest('.image-container');
          
          img.addEventListener('load', () => {
            img.classList.add('loaded');
            if (container) {
              container.classList.add('loaded');
            }
          });
          
          if (img.complete) {
            img.classList.add('loaded');
            if (container) {
              container.classList.add('loaded');
            }
          }
          
          imageObserver.unobserve(img);
        }
      });
    });

    images.forEach(img => {
      imageObserver.observe(img);
    });
  });

  // Performance optimization: Intersection Observer for animations
  if ('IntersectionObserver' in window) {
    const animationObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate-in');
          animationObserver.unobserve(entry.target);
        }
      });
    }, { threshold: 0.1 });

    document.querySelectorAll('.museum-card, .premium-card-hover').forEach(el => {
      animationObserver.observe(el);
    });
  }
</script>