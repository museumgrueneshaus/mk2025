---
import '../../styles/kiosk.css';

// Load current configuration
const response = await fetch(new URL('/config/kiosks.json', Astro.url));
const kiosks = await response.json();
---

<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Museum Kiosk - Admin</title>
</head>
<body>
  <div class="admin-container">
    <!-- Header -->
    <header class="header">
      <div class="container">
        <div class="header-content">
          <div class="logo">
            <span>üèõÔ∏è</span>
            <span>Museum Kiosk Manager</span>
          </div>
          <div>
            <button id="save-config" class="btn btn-primary">
              üíæ Konfiguration speichern
            </button>
          </div>
        </div>
      </div>
    </header>

    <!-- Main Content -->
    <main class="container mt-4">
      <div class="admin-grid">
        
        <!-- Quick Upload Section -->
        <section class="card">
          <div class="card-header">
            <h2 class="card-title">1. Quick Upload</h2>
            <p class="card-description">Ziehen Sie Dateien hierher oder klicken Sie zum Ausw√§hlen</p>
          </div>
          
          <div id="drop-zone" class="drop-zone">
            <div class="drop-zone-content">
              <svg width="60" height="60" viewBox="0 0 24 24" fill="#999">
                <path d="M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM14 13v4h-4v-4H7l5-5 5 5h-3z"/>
              </svg>
              <p class="drop-text">Drag & Drop</p>
              <p class="drop-subtext">PDFs, Bilder, Videos</p>
              <input type="file" id="file-input" multiple accept="image/*,video/*,.pdf" style="display: none;" />
            </div>
          </div>
          
          <div id="upload-list" class="upload-list"></div>
        </section>

        <!-- Kiosk Configuration -->
        <section class="card">
          <div class="card-header">
            <h2 class="card-title">2. Kiosk zuweisen</h2>
            <p class="card-description">W√§hlen Sie Kiosk und Layout</p>
          </div>
          
          <div class="form-group">
            <label for="kiosk-select">Kiosk-Ger√§t:</label>
            <select id="kiosk-select" class="form-control">
              {Object.entries(kiosks).map(([mac, config]: [string, any]) => (
                <option value={mac}>{config.name} ({mac})</option>
              ))}
            </select>
          </div>

          <div class="form-group">
            <label for="layout-select">Layout-Template:</label>
            <select id="layout-select" class="form-control">
              <option value="slideshow-auto">Auto-Slideshow</option>
              <option value="image-gallery">Bildergalerie mit Touch</option>
              <option value="pdf-viewer">PDF Viewer</option>
              <option value="knowledge-base">Wissensdatenbank</option>
              <option value="video-player">Video Player</option>
              <option value="external-url">Externe URL</option>
              <option value="mixed-carousel">Mixed Media Carousel</option>
              <option value="iframe-embed">Iframe Einbettung</option>
            </select>
          </div>

          <div class="form-group">
            <label>Content ausw√§hlen:</label>
            <div id="content-selector" class="content-selector">
              <!-- Dynamically populated based on layout -->
            </div>
          </div>

          <div class="form-group">
            <label>Features:</label>
            <div class="feature-toggles">
              <label class="checkbox-label">
                <input type="checkbox" id="feat-thumbnails" checked />
                <span>Thumbnails</span>
              </label>
              <label class="checkbox-label">
                <input type="checkbox" id="feat-navigation" checked />
                <span>Navigation</span>
              </label>
              <label class="checkbox-label">
                <input type="checkbox" id="feat-autoplay" />
                <span>Autoplay</span>
              </label>
              <label class="checkbox-label">
                <input type="checkbox" id="feat-zoom" checked />
                <span>Zoom</span>
              </label>
            </div>
          </div>
        </section>

        <!-- Live Preview -->
        <section class="card">
          <div class="card-header">
            <h2 class="card-title">3. Live Preview</h2>
            <p class="card-description">So sieht es auf dem Kiosk aus</p>
          </div>
          
          <div class="preview-container">
            <iframe id="preview-frame" src="/viewer/aa-bb-cc-dd-ee-01" class="preview-frame"></iframe>
          </div>
          
          <div class="preview-controls">
            <button id="refresh-preview" class="btn btn-secondary">
              üîÑ Aktualisieren
            </button>
            <button id="fullscreen-preview" class="btn btn-secondary">
              ‚õ∂ Vollbild
            </button>
          </div>
        </section>

        <!-- Exhibit Management -->
        <section class="card full-width">
          <div class="card-header">
            <h2 class="card-title">4. Exponat hinzuf√ºgen</h2>
            <p class="card-description">Erstellen Sie ein neues Exponat durch Anlegen einer Markdown-Datei</p>
          </div>
          
          <div class="exhibit-instructions">
            <h3>So f√ºgen Sie ein neues Exponat hinzu:</h3>
            <ol class="steps">
              <li class="step">
                <span class="step-number"></span>
                <div>
                  <strong>Markdown-Datei erstellen</strong><br/>
                  Erstellen Sie eine .md Datei in <code>/content/exhibits/</code>
                  <pre class="code-block">
---
id: EXP004
title: Sternennacht
artist: Vincent van Gogh
year: 1889
category: painting
image: sternennacht.jpg
---

# Sternennacht

Die Sternennacht ist eines der bekanntesten Gem√§lde...</pre>
                </div>
              </li>
              <li class="step">
                <span class="step-number"></span>
                <div>
                  <strong>Bild hochladen</strong><br/>
                  Kopieren Sie das Bild nach <code>/public/media/images/</code>
                </div>
              </li>
              <li class="step">
                <span class="step-number"></span>
                <div>
                  <strong>Automatische Erkennung</strong><br/>
                  Das Exponat erscheint automatisch in der Wissensdatenbank!
                </div>
              </li>
            </ol>
          </div>

          <div class="current-exhibits">
            <h3>Aktuelle Exponate:</h3>
            <div class="exhibit-list">
              <div class="exhibit-item">‚úì Mona Lisa (Leonardo da Vinci, 1503)</div>
              <div class="exhibit-item">‚úì Die Nachtwache (Rembrandt, 1642)</div>
              <div class="exhibit-item">‚úì Der Schrei (Edvard Munch, 1893)</div>
            </div>
          </div>
        </section>

      </div>
    </main>
  </div>

  <style>
    .admin-container {
      min-height: 100vh;
      background: #f5f5f5;
    }

    .admin-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
      gap: 20px;
    }

    .full-width {
      grid-column: 1 / -1;
    }

    /* Drop Zone */
    .drop-zone {
      border: 2px dashed #ccc;
      border-radius: 8px;
      padding: 40px;
      text-align: center;
      cursor: pointer;
      transition: all 0.3s;
      background: #fafafa;
    }

    .drop-zone:hover {
      border-color: #4CAF50;
      background: #f0f9f0;
    }

    .drop-zone.active {
      border-color: #4CAF50;
      background: #e8f5e9;
    }

    .drop-zone-content {
      pointer-events: none;
    }

    .drop-text {
      font-size: 1.2rem;
      margin: 10px 0 5px;
      color: #333;
    }

    .drop-subtext {
      color: #999;
      font-size: 0.9rem;
    }

    .upload-list {
      margin-top: 20px;
    }

    .upload-item {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 10px;
      background: #f9f9f9;
      border-radius: 4px;
      margin-bottom: 10px;
    }

    .upload-item-name {
      flex: 1;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }

    .upload-item-status {
      color: #4CAF50;
      font-size: 0.9rem;
    }

    /* Forms */
    .form-group {
      margin-bottom: 20px;
    }

    .form-group label {
      display: block;
      margin-bottom: 5px;
      font-weight: 500;
      color: #333;
    }

    .form-control {
      width: 100%;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
      font-size: 16px;
    }

    .form-control:focus {
      outline: none;
      border-color: #4CAF50;
    }

    .content-selector {
      max-height: 200px;
      overflow-y: auto;
      border: 1px solid #ddd;
      border-radius: 4px;
      padding: 10px;
    }

    .content-item {
      padding: 5px;
      margin-bottom: 5px;
    }

    .content-item label {
      display: flex;
      align-items: center;
      cursor: pointer;
    }

    .content-item input[type="checkbox"] {
      margin-right: 10px;
    }

    .feature-toggles {
      display: flex;
      gap: 15px;
      flex-wrap: wrap;
    }

    .checkbox-label {
      display: flex;
      align-items: center;
      cursor: pointer;
    }

    .checkbox-label input {
      margin-right: 5px;
    }

    /* Preview */
    .preview-container {
      background: #000;
      border-radius: 4px;
      overflow: hidden;
      position: relative;
      padding-bottom: 56.25%; /* 16:9 aspect ratio */
    }

    .preview-frame {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      border: none;
    }

    .preview-controls {
      display: flex;
      gap: 10px;
      margin-top: 10px;
    }

    /* Exhibit Management */
    .exhibit-instructions {
      background: #f9f9f9;
      padding: 20px;
      border-radius: 8px;
      margin-bottom: 20px;
    }

    .code-block {
      background: #2d2d2d;
      color: #f8f8f2;
      padding: 15px;
      border-radius: 4px;
      overflow-x: auto;
      font-family: 'Courier New', monospace;
      font-size: 0.9rem;
      margin-top: 10px;
    }

    .current-exhibits {
      background: #f0f9f0;
      padding: 20px;
      border-radius: 8px;
    }

    .exhibit-list {
      display: grid;
      gap: 10px;
      margin-top: 10px;
    }

    .exhibit-item {
      padding: 10px;
      background: white;
      border-radius: 4px;
      border-left: 3px solid #4CAF50;
    }
  </style>

  <script>
    // Drop Zone functionality
    const dropZone = document.getElementById('drop-zone');
    const fileInput = document.getElementById('file-input') as HTMLInputElement;
    const uploadList = document.getElementById('upload-list');
    const kioskSelect = document.getElementById('kiosk-select') as HTMLSelectElement;
    const layoutSelect = document.getElementById('layout-select') as HTMLSelectElement;
    const contentSelector = document.getElementById('content-selector');
    const previewFrame = document.getElementById('preview-frame') as HTMLIFrameElement;

    // File upload handling
    dropZone?.addEventListener('click', () => fileInput?.click());
    
    dropZone?.addEventListener('dragover', (e) => {
      e.preventDefault();
      dropZone.classList.add('active');
    });

    dropZone?.addEventListener('dragleave', () => {
      dropZone.classList.remove('active');
    });

    dropZone?.addEventListener('drop', (e) => {
      e.preventDefault();
      dropZone.classList.remove('active');
      handleFiles(e.dataTransfer?.files);
    });

    fileInput?.addEventListener('change', (e) => {
      const target = e.target as HTMLInputElement;
      handleFiles(target.files);
    });

    // Store available files
    let availableFiles: any = {
      images: [],
      videos: [],
      pdfs: [],
      audio: []
    };

    // Load available files from server
    async function loadAvailableFiles() {
      try {
        const response = await fetch('/api/upload?type=all');
        const result = await response.json();
        
        if (result.success) {
          // Reset arrays
          availableFiles = {
            images: [],
            videos: [],
            pdfs: [],
            audio: []
          };
          
          // Organize files by type
          result.files.forEach((file: any) => {
            if (availableFiles[file.type]) {
              availableFiles[file.type].push(file);
            }
          });
        }
      } catch (error) {
        console.error('Failed to load files:', error);
      }
    }

    async function handleFiles(files: FileList | null | undefined) {
      if (!files) return;
      
      for (const file of Array.from(files)) {
        // Display uploading status
        const item = document.createElement('div');
        item.className = 'upload-item';
        const itemId = `upload-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
        item.id = itemId;
        item.innerHTML = `
          <span class="upload-item-name">${file.name}</span>
          <span class="upload-item-status">‚è≥ Uploading...</span>
        `;
        uploadList?.appendChild(item);

        // Actually upload the file
        const formData = new FormData();
        formData.append('file', file);
        
        try {
          const response = await fetch('/api/upload', {
            method: 'POST',
            body: formData
          });
          
          const result = await response.json();
          
          if (response.ok && result.success) {
            // Update status to success
            const uploadItem = document.getElementById(itemId);
            if (uploadItem) {
              uploadItem.innerHTML = `
                <span class="upload-item-name">${file.name}</span>
                <span class="upload-item-status" style="color: #4CAF50;">‚úì Erfolgreich hochgeladen</span>
              `;
              
              // Remove success message after 3 seconds
              setTimeout(() => {
                uploadItem.style.transition = 'opacity 0.5s';
                uploadItem.style.opacity = '0.5';
              }, 3000);
            }
            
            // Refresh content selector to show new file
            console.log('Upload successful, refreshing file list...');
            await loadAvailableFiles();
            updateContentSelector();
          } else {
            // Update status to error with specific message
            const uploadItem = document.getElementById(itemId);
            if (uploadItem) {
              const errorMsg = result.details || result.error || 'Upload fehlgeschlagen';
              uploadItem.innerHTML = `
                <span class="upload-item-name">${file.name}</span>
                <span class="upload-item-status" style="color: red;">‚ùå ${errorMsg}</span>
              `;
            }
          }
        } catch (error) {
          console.error('Upload error:', error);
          const uploadItem = document.getElementById(itemId);
          if (uploadItem) {
            uploadItem.innerHTML = `
              <span class="upload-item-name">${file.name}</span>
              <span class="upload-item-status" style="color: red;">‚ùå Netzwerkfehler</span>
            `;
          }
        }
      }
    }

    // Update content selector based on layout
    function updateContentSelector() {
      if (!contentSelector) return;
      
      const layout = layoutSelect?.value;
      
      let html = '';
      
      switch(layout) {
        case 'slideshow-auto':
        case 'image-gallery':
          html = availableFiles.images.length > 0 
            ? availableFiles.images.map((file: any) => `
                <div class="content-item">
                  <label>
                    <input type="checkbox" value="${file.path}" data-name="${file.name}" /> 
                    ${file.name}
                  </label>
                </div>
              `).join('')
            : '<p style="color: #666;">Keine Bilder vorhanden. Laden Sie welche hoch!</p>';
          break;
        case 'pdf-viewer':
          html = availableFiles.pdfs.length > 0
            ? availableFiles.pdfs.map((file: any) => `
                <div class="content-item">
                  <label>
                    <input type="checkbox" value="${file.path}" data-name="${file.name}" /> 
                    ${file.name}
                  </label>
                </div>
              `).join('')
            : '<p style="color: #666;">Keine PDFs vorhanden. Laden Sie welche hoch!</p>';
          break;
        case 'knowledge-base':
          html = `<p style="color: #666;">Zeigt automatisch alle Exponate aus /config/exhibits.json</p>`;
          break;
        case 'video-player':
          html = availableFiles.videos.length > 0
            ? availableFiles.videos.map((file: any) => `
                <div class="content-item">
                  <label>
                    <input type="checkbox" value="${file.path}" data-name="${file.name}" /> 
                    ${file.name}
                  </label>
                </div>
              `).join('')
            : '<p style="color: #666;">Keine Videos vorhanden. Laden Sie welche hoch!</p>';
          break;
        case 'external-url':
          html = `
            <input type="url" class="form-control" placeholder="https://example.com" value="https://museum.example.com" />
            <p style="color: #666; margin-top: 10px;">Geben Sie die URL ein, die angezeigt werden soll</p>
          `;
          break;
        case 'mixed-carousel':
          html = `
            <p style="color: #666;">Kombiniert Bilder, Videos und Text-Slides</p>
            <div class="content-item">
              <label><input type="checkbox" checked /> welcome1.jpg (Bild)</label>
            </div>
            <div class="content-item">
              <label><input type="checkbox" /> intro.mp4 (Video)</label>
            </div>
            <div class="content-item">
              <label><input type="checkbox" checked /> √ñffnungszeiten (Text)</label>
            </div>
          `;
          break;
        case 'iframe-embed':
          html = `
            <input type="url" class="form-control" placeholder="YouTube, Vimeo, etc." style="margin-bottom: 10px;" />
            <p style="color: #666;">Embed-URL eingeben (YouTube, Vimeo, Google Maps, etc.)</p>
          `;
          break;
      }
      
      contentSelector.innerHTML = html;
    }

    layoutSelect?.addEventListener('change', updateContentSelector);

    // Update preview
    kioskSelect?.addEventListener('change', () => {
      const mac = kioskSelect.value;
      previewFrame.src = `/viewer/${mac}`;
    });

    // Refresh preview
    document.getElementById('refresh-preview')?.addEventListener('click', () => {
      previewFrame.src = previewFrame.src;
    });

    // Fullscreen preview
    document.getElementById('fullscreen-preview')?.addEventListener('click', () => {
      previewFrame.requestFullscreen();
    });

    // Save configuration
    document.getElementById('save-config')?.addEventListener('click', async () => {
      const mac = kioskSelect?.value;
      const layout = layoutSelect?.value;
      
      // Gather selected content based on layout
      let content: any = {};
      const checkboxes = contentSelector?.querySelectorAll('input[type="checkbox"]:checked') as NodeListOf<HTMLInputElement>;
      
      if (layout === 'slideshow-auto' || layout === 'image-gallery') {
        content.images = Array.from(checkboxes).map(cb => cb.value);
      } else if (layout === 'pdf-viewer') {
        content.pdfs = Array.from(checkboxes).map(cb => cb.value);
      } else if (layout === 'video-player') {
        content.videos = Array.from(checkboxes).map(cb => cb.value);
      } else if (layout === 'external-url') {
        const urlInput = contentSelector?.querySelector('input[type="url"]') as HTMLInputElement;
        content.url = urlInput?.value;
      }
      
      const config = {
        name: kioskSelect?.selectedOptions[0]?.text.split(' (')[0],
        layout: layout,
        content: content,
        features: {
          thumbnails: (document.getElementById('feat-thumbnails') as HTMLInputElement)?.checked,
          navigation: (document.getElementById('feat-navigation') as HTMLInputElement)?.checked,
          autoplay: (document.getElementById('feat-autoplay') as HTMLInputElement)?.checked,
          zoom: (document.getElementById('feat-zoom') as HTMLInputElement)?.checked,
        }
      };
      
      try {
        // Save to server
        const response = await fetch('/api/config', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ mac, config })
        });
        
        const result = await response.json();
        
        if (result.success) {
          alert('‚úÖ Konfiguration gespeichert! Kiosks werden automatisch aktualisiert.');
          
          // Reload preview with new config
          setTimeout(() => {
            previewFrame.src = `/viewer/${mac}?t=${Date.now()}`;
          }, 500);
        } else {
          alert('‚ùå Fehler beim Speichern der Konfiguration');
        }
      } catch (error) {
        console.error('Save error:', error);
        alert('‚ùå Fehler beim Speichern der Konfiguration');
      }
    });

    // Initialize
    loadAvailableFiles().then(() => {
      updateContentSelector();
    });
  </script>
</body>
</html>