---
import MobileLayout from '../../layouts/MobileLayout.astro';
import { getCollection } from 'astro:content';

// Get all exhibits
const exhibits = await getCollection('exhibits');

// Group by category
const categories = [...new Set(exhibits.flatMap(e => e.data.tags || []))];
const featured = exhibits.filter(e => e.data.featured);
---

<MobileLayout title="Exponate - Museum Gr√ºnes Haus" activeTab="exhibits">
  <div class="mobile-page">
    <!-- Clean Header -->
    <div class="mobile-header">
      <h1>Exponate</h1>
    </div>

    <!-- Clean Search -->
    <div style="padding: 0 var(--space-4) var(--space-4) var(--space-4);">
      <div class="clean-search">
        <svg class="clean-search-icon" viewBox="0 0 24 24" fill="currentColor">
          <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
        </svg>
        <input 
          type="text" 
          id="search-input" 
          class="clean-search-input"
          placeholder="Suchen..."
          aria-label="Exponate durchsuchen"
        />
      </div>

      <!-- Clean Filter Buttons -->
      <div class="clean-btn-group">
        <button class="clean-btn clean-btn-primary filter-tab" data-filter="all">
          Alle
        </button>
        <button class="clean-btn filter-tab" data-filter="featured">
          Highlights
        </button>
        {categories.slice(0, 3).map(cat => (
          <button class="clean-btn filter-tab" data-filter={cat}>
            {cat}
          </button>
        ))}
      </div>
    </div>

    <!-- Clean Content -->
    <div class="mobile-content">
      <!-- Featured Section -->
      {featured.length > 0 && (
        <section class="clean-section exhibit-section" data-category="featured">
          <h2 class="clean-section-title">‚≠ê Highlights</h2>
          <div class="clean-grid clean-grid-2">
            {featured.map(exhibit => (
              <a href={`/mobile/exhibit/${exhibit.slug}`} 
                 class="exhibit-card" 
                 data-tags={JSON.stringify(exhibit.data.tags || [])}
                 data-title={exhibit.data.title.toLowerCase()}
                 data-artist={exhibit.data.artist.toLowerCase()}>
                <div class="exhibit-card-image">
                  <img src={exhibit.data.thumbnail || exhibit.data.image} 
                       alt={exhibit.data.title} 
                       loading="lazy" />
                  {exhibit.data.audioGuide && (
                    <div class="clean-badge clean-badge-audio" 
                         style="position: absolute; top: var(--space-2); right: var(--space-2);">
                      üéß
                    </div>
                  )}
                </div>
                <div class="exhibit-card-content">
                  <h3 class="exhibit-card-title">{exhibit.data.title}</h3>
                  <p class="exhibit-card-artist">{exhibit.data.artist}</p>
                  {exhibit.data.year && (
                    <div class="exhibit-card-meta">
                      <span>{exhibit.data.year}</span>
                    </div>
                  )}
                </div>
              </a>
            ))}
          </div>
        </section>
      )}

      <!-- All Exhibits -->
      <section class="clean-section exhibit-section" data-category="all">
        <h2 class="clean-section-title">Alle Exponate</h2>
        <div class="clean-card">
          <div class="clean-list">
            {exhibits.map(exhibit => (
              <a href={`/mobile/exhibit/${exhibit.slug}`} 
                 class="clean-exhibit-item"
                 data-tags={JSON.stringify(exhibit.data.tags || [])}
                 data-title={exhibit.data.title.toLowerCase()}
                 data-artist={exhibit.data.artist.toLowerCase()}>
                <div class="clean-exhibit-thumb">
                  <img src={exhibit.data.thumbnail || exhibit.data.image} 
                       alt={exhibit.data.title}
                       loading="lazy" />
                </div>
                <div class="clean-exhibit-info">
                  <h3 class="clean-exhibit-title">{exhibit.data.title}</h3>
                  <p class="clean-exhibit-artist">{exhibit.data.artist}</p>
                  <div class="clean-exhibit-details">
                    {exhibit.data.location && (
                      <span>üìç {exhibit.data.location}</span>
                    )}
                    {exhibit.data.audioGuide && (
                      <span class="clean-badge clean-badge-audio">üéß</span>
                    )}
                  </div>
                </div>
                <div class="clean-chevron">‚Ä∫</div>
              </a>
            ))}
          </div>
        </div>
      </section>

      <!-- No Results -->
      <div id="no-results" class="clean-empty" style="display: none;">
        <div class="clean-empty-icon">üîç</div>
        <p class="clean-empty-text">Keine Exponate gefunden</p>
      </div>
    </div>
  </div>
</MobileLayout>

<script>
  // Search functionality
  const searchInput = document.getElementById('search-input') as HTMLInputElement;
  const noResults = document.getElementById('no-results');
  
  searchInput?.addEventListener('input', (e) => {
    const query = (e.target as HTMLInputElement).value.toLowerCase();
    filterExhibits(query);
  });
  
  function filterExhibits(query: string) {
    const cards = document.querySelectorAll('.exhibit-card, .clean-exhibit-item');
    let hasResults = false;
    
    cards.forEach((card) => {
      const title = card.getAttribute('data-title') || '';
      const artist = card.getAttribute('data-artist') || '';
      const tags = JSON.parse(card.getAttribute('data-tags') || '[]');
      
      const matches = !query || 
        title.includes(query) || 
        artist.includes(query) ||
        tags.some((tag: string) => tag.toLowerCase().includes(query));
      
      if (matches) {
        card.classList.remove('hidden');
        hasResults = true;
      } else {
        card.classList.add('hidden');
      }
    });
    
    // Show/hide sections
    document.querySelectorAll('.exhibit-section').forEach(section => {
      const visibleCards = section.querySelectorAll('.exhibit-card:not(.hidden), .clean-exhibit-item:not(.hidden)');
      if (visibleCards.length === 0) {
        section.classList.add('hidden');
      } else {
        section.classList.remove('hidden');
      }
    });
    
    // Show no results message
    if (noResults) {
      noResults.style.display = hasResults ? 'none' : 'block';
    }
  }
  
  // Filter tabs
  const filterTabs = document.querySelectorAll('.filter-tab');
  
  filterTabs.forEach(tab => {
    tab.addEventListener('click', () => {
      const filter = tab.getAttribute('data-filter');
      
      // Update active tab
      filterTabs.forEach(t => t.classList.remove('clean-btn-primary'));
      filterTabs.forEach(t => t.classList.add('clean-btn'));
      tab.classList.remove('clean-btn');
      tab.classList.add('clean-btn-primary');
      
      // Filter content
      if (filter === 'all') {
        // Show all
        document.querySelectorAll('.exhibit-card, .clean-exhibit-item').forEach(card => {
          card.classList.remove('hidden');
        });
        document.querySelectorAll('.exhibit-section').forEach(section => {
          section.classList.remove('hidden');
        });
      } else if (filter === 'featured') {
        // Show only featured section
        document.querySelectorAll('.exhibit-section').forEach(section => {
          if (section.getAttribute('data-category') === 'featured') {
            section.classList.remove('hidden');
          } else {
            section.classList.add('hidden');
          }
        });
      } else {
        // Filter by tag
        document.querySelectorAll('.exhibit-card, .clean-exhibit-item').forEach(card => {
          const tags = JSON.parse(card.getAttribute('data-tags') || '[]');
          if (tags.includes(filter)) {
            card.classList.remove('hidden');
          } else {
            card.classList.add('hidden');
          }
        });
        
        // Update section visibility
        document.querySelectorAll('.exhibit-section').forEach(section => {
          const visibleCards = section.querySelectorAll('.exhibit-card:not(.hidden), .clean-exhibit-item:not(.hidden)');
          if (visibleCards.length === 0) {
            section.classList.add('hidden');
          } else {
            section.classList.remove('hidden');
          }
        });
      }
      
      // Check for no results
      const hasResults = document.querySelectorAll('.exhibit-card:not(.hidden), .clean-exhibit-item:not(.hidden)').length > 0;
      if (noResults) {
        noResults.style.display = hasResults ? 'none' : 'block';
      }
    });
  });

  // Add CSS for hidden elements
  const style = document.createElement('style');
  style.textContent = `
    .hidden {
      display: none !important;
    }
  `;
  document.head.appendChild(style);
</script>