---
import MobileLayout from '../../layouts/MobileLayout.astro';
import { getCollection } from 'astro:content';

// Get all tours
const tours = await getCollection('tours', ({ data }) => data.published);

// Group tours by category
const toursByCategory = {
  highlights: tours.filter(t => t.data.category === 'highlights'),
  thematic: tours.filter(t => t.data.category === 'thematic'),
  family: tours.filter(t => t.data.category === 'family'),
  expert: tours.filter(t => t.data.category === 'expert')
};
---

<MobileLayout title="Audio-Guide - Museum Gr√ºnes Haus">
  <div class="tours-page">
    <!-- Hero -->
    <div class="tours-hero">
      <div class="hero-content">
        <h1>üéß Audio-Guide</h1>
        <p>Entdecken Sie das Museum mit unseren gef√ºhrten Touren</p>
      </div>
    </div>

    <!-- Currently Playing (if any) -->
    <div id="current-tour" class="current-tour" style="display: none;">
      <div class="current-header">
        <span class="current-label">Aktuelle Tour</span>
        <button id="stop-tour" class="stop-btn">Beenden</button>
      </div>
      <div class="current-info">
        <img id="current-image" src="" alt="" />
        <div class="current-details">
          <h3 id="current-title"></h3>
          <div class="progress-bar">
            <div id="progress-fill" class="progress-fill"></div>
          </div>
          <span id="current-time">0:00 / 0:00</span>
        </div>
      </div>
      <audio id="current-audio" controls></audio>
    </div>

    <!-- Tour Categories -->
    <div class="tour-sections">
      <!-- Highlights -->
      {toursByCategory.highlights.length > 0 && (
        <section class="tour-section">
          <h2 class="section-title">
            <span class="section-icon">‚≠ê</span>
            Highlights
          </h2>
          <div class="tour-grid">
            {toursByCategory.highlights.map(tour => (
              <button class="tour-card" data-tour={JSON.stringify(tour.data)}>
                <div class="tour-image">
                  <img src={tour.data.image} alt={tour.data.title} />
                  <div class="tour-duration">{tour.data.duration}</div>
                </div>
                <div class="tour-info">
                  <h3>{tour.data.title}</h3>
                  <p>{tour.data.description}</p>
                  <div class="tour-meta">
                    <span class="tour-stops">{tour.data.stops.length} Stationen</span>
                    {tour.data.languages && (
                      <span class="tour-languages">
                        {tour.data.languages.join(', ')}
                      </span>
                    )}
                  </div>
                </div>
              </button>
            ))}
          </div>
        </section>
      )}

      <!-- Thematic Tours -->
      {toursByCategory.thematic.length > 0 && (
        <section class="tour-section">
          <h2 class="section-title">
            <span class="section-icon">üé®</span>
            Themenf√ºhrungen
          </h2>
          <div class="tour-grid">
            {toursByCategory.thematic.map(tour => (
              <button class="tour-card" data-tour={JSON.stringify(tour.data)}>
                <div class="tour-image">
                  <img src={tour.data.image} alt={tour.data.title} />
                  <div class="tour-duration">{tour.data.duration}</div>
                </div>
                <div class="tour-info">
                  <h3>{tour.data.title}</h3>
                  <p>{tour.data.description}</p>
                  <div class="tour-meta">
                    <span class="tour-stops">{tour.data.stops.length} Stationen</span>
                  </div>
                </div>
              </button>
            ))}
          </div>
        </section>
      )}

      <!-- Family Tours -->
      {toursByCategory.family.length > 0 && (
        <section class="tour-section">
          <h2 class="section-title">
            <span class="section-icon">üë®‚Äçüë©‚Äçüëß‚Äçüë¶</span>
            Familienf√ºhrungen
          </h2>
          <div class="tour-grid">
            {toursByCategory.family.map(tour => (
              <button class="tour-card" data-tour={JSON.stringify(tour.data)}>
                <div class="tour-image">
                  <img src={tour.data.image} alt={tour.data.title} />
                  <div class="tour-duration">{tour.data.duration}</div>
                  <div class="tour-badge family">Familie</div>
                </div>
                <div class="tour-info">
                  <h3>{tour.data.title}</h3>
                  <p>{tour.data.description}</p>
                  <div class="tour-meta">
                    <span class="tour-stops">{tour.data.stops.length} Stationen</span>
                    <span class="tour-age">Ab {tour.data.minAge || 6} Jahren</span>
                  </div>
                </div>
              </button>
            ))}
          </div>
        </section>
      )}

      <!-- Expert Tours -->
      {toursByCategory.expert.length > 0 && (
        <section class="tour-section">
          <h2 class="section-title">
            <span class="section-icon">üéì</span>
            Expertenf√ºhrungen
          </h2>
          <div class="tour-grid">
            {toursByCategory.expert.map(tour => (
              <button class="tour-card" data-tour={JSON.stringify(tour.data)}>
                <div class="tour-image">
                  <img src={tour.data.image} alt={tour.data.title} />
                  <div class="tour-duration">{tour.data.duration}</div>
                  <div class="tour-badge expert">Expert</div>
                </div>
                <div class="tour-info">
                  <h3>{tour.data.title}</h3>
                  <p>{tour.data.description}</p>
                  <div class="tour-meta">
                    <span class="tour-stops">{tour.data.stops.length} Stationen</span>
                  </div>
                </div>
              </button>
            ))}
          </div>
        </section>
      )}
    </div>

    <!-- Tour Detail Modal -->
    <div id="tour-modal" class="tour-modal" style="display: none;">
      <div class="modal-content">
        <button class="modal-close" id="close-modal">√ó</button>
        <img id="modal-image" src="" alt="" />
        <div class="modal-body">
          <h2 id="modal-title"></h2>
          <p id="modal-description"></p>
          
          <div class="modal-info">
            <div class="info-item">
              <span class="info-label">Dauer</span>
              <span id="modal-duration"></span>
            </div>
            <div class="info-item">
              <span class="info-label">Stationen</span>
              <span id="modal-stops"></span>
            </div>
            <div class="info-item">
              <span class="info-label">Sprachen</span>
              <span id="modal-languages"></span>
            </div>
          </div>
          
          <div class="modal-actions">
            <button id="start-tour" class="start-btn">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                <path d="M8 5v14l11-7z"/>
              </svg>
              Tour starten
            </button>
            <button id="download-tour" class="download-btn">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                <path d="M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z"/>
              </svg>
              Offline speichern
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</MobileLayout>

<style>
  .tours-page {
    min-height: 100vh;
    background: white;
  }

  /* Hero */
  .tours-hero {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    padding: 40px 20px;
    text-align: center;
    color: white;
  }

  .hero-content h1 {
    font-size: 32px;
    margin-bottom: 10px;
  }

  .hero-content p {
    font-size: 16px;
    opacity: 0.95;
  }

  /* Current Tour */
  .current-tour {
    margin: 20px;
    padding: 15px;
    background: #f0f8ff;
    border-radius: 12px;
    border: 2px solid #4CAF50;
  }

  .current-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 12px;
  }

  .current-label {
    font-size: 12px;
    font-weight: 600;
    text-transform: uppercase;
    color: #4CAF50;
    letter-spacing: 0.5px;
  }

  .stop-btn {
    padding: 6px 12px;
    background: #ff4444;
    color: white;
    border: none;
    border-radius: 6px;
    font-size: 12px;
    cursor: pointer;
  }

  .current-info {
    display: flex;
    gap: 12px;
    margin-bottom: 12px;
  }

  .current-info img {
    width: 60px;
    height: 60px;
    border-radius: 8px;
    object-fit: cover;
  }

  .current-details {
    flex: 1;
  }

  .current-details h3 {
    font-size: 16px;
    margin-bottom: 8px;
  }

  .progress-bar {
    height: 4px;
    background: #ddd;
    border-radius: 2px;
    margin-bottom: 4px;
    overflow: hidden;
  }

  .progress-fill {
    height: 100%;
    background: #4CAF50;
    transition: width 0.3s;
  }

  #current-time {
    font-size: 11px;
    color: #666;
  }

  #current-audio {
    width: 100%;
    height: 40px;
  }

  /* Tour Sections */
  .tour-sections {
    padding: 20px;
  }

  .tour-section {
    margin-bottom: 30px;
  }

  .section-title {
    display: flex;
    align-items: center;
    gap: 10px;
    font-size: 20px;
    margin-bottom: 15px;
    color: #333;
  }

  .section-icon {
    font-size: 24px;
  }

  /* Tour Grid */
  .tour-grid {
    display: grid;
    gap: 15px;
  }

  .tour-card {
    display: flex;
    gap: 15px;
    padding: 15px;
    background: white;
    border: 1px solid #eee;
    border-radius: 12px;
    text-align: left;
    cursor: pointer;
    transition: all 0.2s;
    width: 100%;
  }

  .tour-card:active {
    transform: scale(0.98);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .tour-image {
    position: relative;
    width: 100px;
    height: 100px;
    border-radius: 8px;
    overflow: hidden;
    flex-shrink: 0;
  }

  .tour-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .tour-duration {
    position: absolute;
    bottom: 8px;
    right: 8px;
    padding: 4px 8px;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    font-size: 11px;
    border-radius: 4px;
  }

  .tour-badge {
    position: absolute;
    top: 8px;
    left: 8px;
    padding: 4px 8px;
    font-size: 10px;
    font-weight: bold;
    text-transform: uppercase;
    border-radius: 4px;
    letter-spacing: 0.5px;
  }

  .tour-badge.family {
    background: #4CAF50;
    color: white;
  }

  .tour-badge.expert {
    background: #ff9800;
    color: white;
  }

  .tour-info {
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .tour-info h3 {
    font-size: 16px;
    margin-bottom: 6px;
    color: #333;
  }

  .tour-info p {
    font-size: 13px;
    color: #666;
    line-height: 1.4;
    margin-bottom: 8px;
  }

  .tour-meta {
    display: flex;
    gap: 12px;
    margin-top: auto;
    font-size: 12px;
    color: #999;
  }

  .tour-stops {
    color: #4CAF50;
    font-weight: 500;
  }

  /* Modal */
  .tour-modal {
    position: fixed;
    inset: 0;
    background: rgba(0, 0, 0, 0.8);
    display: flex;
    align-items: flex-end;
    z-index: 1000;
    padding: 0;
  }

  .modal-content {
    background: white;
    width: 100%;
    max-height: 90vh;
    border-top-left-radius: 20px;
    border-top-right-radius: 20px;
    overflow-y: auto;
    position: relative;
  }

  .modal-close {
    position: absolute;
    top: 15px;
    right: 15px;
    background: rgba(0, 0, 0, 0.5);
    color: white;
    border: none;
    width: 36px;
    height: 36px;
    border-radius: 50%;
    font-size: 24px;
    cursor: pointer;
    z-index: 1;
  }

  #modal-image {
    width: 100%;
    height: 250px;
    object-fit: cover;
  }

  .modal-body {
    padding: 20px;
  }

  .modal-body h2 {
    font-size: 24px;
    margin-bottom: 10px;
    color: #333;
  }

  .modal-body p {
    font-size: 14px;
    color: #666;
    line-height: 1.5;
    margin-bottom: 20px;
  }

  .modal-info {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 15px;
    margin-bottom: 25px;
  }

  .info-item {
    display: flex;
    flex-direction: column;
  }

  .info-label {
    font-size: 12px;
    color: #999;
    margin-bottom: 4px;
  }

  .info-item span:last-child {
    font-size: 14px;
    color: #333;
    font-weight: 500;
  }

  .modal-actions {
    display: flex;
    gap: 10px;
  }

  .start-btn,
  .download-btn {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    padding: 14px;
    border: none;
    border-radius: 8px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
  }

  .start-btn {
    background: #4CAF50;
    color: white;
  }

  .download-btn {
    background: #f0f0f0;
    color: #333;
  }

  .start-btn:active,
  .download-btn:active {
    transform: scale(0.98);
  }
</style>

<script>
  // Tour management
  let currentTour: any = null;
  let currentAudio: HTMLAudioElement | null = null;
  
  // Handle tour card clicks
  document.querySelectorAll('.tour-card').forEach(card => {
    card.addEventListener('click', (e) => {
      const tourData = JSON.parse((e.currentTarget as HTMLElement).dataset.tour || '{}');
      showTourModal(tourData);
    });
  });
  
  // Show tour modal
  function showTourModal(tour: any) {
    const modal = document.getElementById('tour-modal');
    
    // Update modal content
    const modalImage = document.getElementById('modal-image') as HTMLImageElement;
    const modalTitle = document.getElementById('modal-title');
    const modalDescription = document.getElementById('modal-description');
    const modalDuration = document.getElementById('modal-duration');
    const modalStops = document.getElementById('modal-stops');
    const modalLanguages = document.getElementById('modal-languages');
    
    if (modalImage) modalImage.src = tour.image;
    if (modalTitle) modalTitle.textContent = tour.title;
    if (modalDescription) modalDescription.textContent = tour.description;
    if (modalDuration) modalDuration.textContent = tour.duration;
    if (modalStops) modalStops.textContent = `${tour.stops.length} Stationen`;
    if (modalLanguages) modalLanguages.textContent = tour.languages?.join(', ') || 'Deutsch';
    
    // Store current tour data
    currentTour = tour;
    
    // Show modal
    if (modal) {
      modal.style.display = 'flex';
    }
  }
  
  // Close modal
  document.getElementById('close-modal')?.addEventListener('click', () => {
    const modal = document.getElementById('tour-modal');
    if (modal) {
      modal.style.display = 'none';
    }
  });
  
  // Start tour
  document.getElementById('start-tour')?.addEventListener('click', () => {
    if (currentTour) {
      startTour(currentTour);
      
      // Close modal
      const modal = document.getElementById('tour-modal');
      if (modal) {
        modal.style.display = 'none';
      }
    }
  });
  
  // Start playing tour
  function startTour(tour: any) {
    const currentTourEl = document.getElementById('current-tour');
    const currentImage = document.getElementById('current-image') as HTMLImageElement;
    const currentTitle = document.getElementById('current-title');
    const currentAudioEl = document.getElementById('current-audio') as HTMLAudioElement;
    
    if (currentTourEl) {
      currentTourEl.style.display = 'block';
    }
    
    if (currentImage) currentImage.src = tour.image;
    if (currentTitle) currentTitle.textContent = tour.title;
    
    // Load first audio stop
    if (currentAudioEl && tour.stops?.[0]?.audio) {
      currentAudioEl.src = tour.stops[0].audio;
      currentAudio = currentAudioEl;
      
      // Update progress
      currentAudioEl.addEventListener('timeupdate', updateProgress);
    }
    
    // Save to active tours
    localStorage.setItem('activeTour', JSON.stringify(tour));
  }
  
  // Update progress
  function updateProgress() {
    if (currentAudio) {
      const progress = (currentAudio.currentTime / currentAudio.duration) * 100;
      const progressFill = document.getElementById('progress-fill');
      const currentTime = document.getElementById('current-time');
      
      if (progressFill) {
        progressFill.style.width = `${progress}%`;
      }
      
      if (currentTime) {
        const formatTime = (seconds: number) => {
          const mins = Math.floor(seconds / 60);
          const secs = Math.floor(seconds % 60);
          return `${mins}:${secs.toString().padStart(2, '0')}`;
        };
        
        currentTime.textContent = `${formatTime(currentAudio.currentTime)} / ${formatTime(currentAudio.duration || 0)}`;
      }
    }
  }
  
  // Stop tour
  document.getElementById('stop-tour')?.addEventListener('click', () => {
    if (currentAudio) {
      currentAudio.pause();
      currentAudio = null;
    }
    
    const currentTourEl = document.getElementById('current-tour');
    if (currentTourEl) {
      currentTourEl.style.display = 'none';
    }
    
    localStorage.removeItem('activeTour');
  });
  
  // Download tour for offline use
  document.getElementById('download-tour')?.addEventListener('click', async () => {
    if (currentTour) {
      // In a real app, this would use service workers for offline caching
      alert('Tour wird f√ºr Offline-Nutzung heruntergeladen...');
      
      // Save to local storage
      let downloads = JSON.parse(localStorage.getItem('downloadedTours') || '[]');
      downloads.push(currentTour);
      localStorage.setItem('downloadedTours', JSON.stringify(downloads));
      
      // Update button
      const btn = document.getElementById('download-tour');
      if (btn) {
        btn.textContent = 'Heruntergeladen ‚úì';
        btn.setAttribute('disabled', 'true');
      }
    }
  });
  
  // Check for active tour on load
  const activeTour = localStorage.getItem('activeTour');
  if (activeTour) {
    startTour(JSON.parse(activeTour));
  }
</script>