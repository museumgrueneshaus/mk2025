---
import MobileLayout from '../../layouts/MobileLayout.astro';
---

<MobileLayout title="QR Scanner - Museum Gr√ºnes Haus" activeTab="scan">
  <div class="scan-page">
    <!-- Camera View -->
    <div class="camera-container">
      <video id="camera-view" autoplay playsinline></video>
      <div class="scan-overlay">
        <div class="scan-frame">
          <div class="corner tl"></div>
          <div class="corner tr"></div>
          <div class="corner bl"></div>
          <div class="corner br"></div>
        </div>
        <p class="scan-hint">Richten Sie die Kamera auf einen QR-Code</p>
      </div>
    </div>

    <!-- Action Buttons -->
    <div class="scan-actions">
      <button id="torch-btn" class="action-btn" aria-label="Taschenlampe">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
          <path d="M6 14l3 3v5h6v-5l3-3V9H6v5zm5-12h2v3h-2V2zM3.5 5.875L4.914 4.46l2.12 2.122L5.62 7.997 3.5 5.875zm13.46.71l2.123-2.12 1.414 1.414L18.375 8l-2.122-2.122z"/>
        </svg>
        <span>Licht</span>
      </button>
      
      <button id="switch-camera-btn" class="action-btn" aria-label="Kamera wechseln">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
          <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z"/>
        </svg>
        <span>Kamera</span>
      </button>

      <button id="manual-code-btn" class="action-btn" aria-label="Code eingeben">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
          <path d="M22 3H2C.9 3 0 3.9 0 5v14c0 1.1.9 2 2 2h20c1.1 0 1.99-.9 1.99-2L24 5c0-1.1-.9-2-2-2zM8 6c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm6 12H2v-1c0-2 4-3.1 6-3.1s6 1.1 6 3.1v1zm3.85-4h1.64L21 16l-1.99 1.99c-1.31-.98-2.28-2.38-2.73-3.99-.18-.64-.28-1.31-.28-2s.1-1.36.28-2c.45-1.62 1.42-3.01 2.73-3.99L21 8l-1.51 2h-1.64c-.22.63-.35 1.3-.35 2s.13 1.37.35 2z"/>
        </svg>
        <span>Eingeben</span>
      </button>
    </div>

    <!-- Recent Scans -->
    <div class="recent-scans">
      <div class="mobile-content">
        <section class="clean-section">
          <h2 class="clean-section-title">Zuletzt gescannt</h2>
          <div class="clean-card">
            <div id="recent-list" class="clean-list">
              <div class="clean-empty">
                <div class="clean-empty-icon">üì±</div>
                <p class="clean-empty-text">Noch keine QR-Codes gescannt</p>
              </div>
            </div>
          </div>
        </section>
      </div>
    </div>

    <!-- Manual Input Modal -->
    <div id="manual-modal" class="modal" style="display: none;">
      <div class="modal-content">
        <button class="modal-close" id="close-modal">√ó</button>
        <h2>Code eingeben</h2>
        <p>Geben Sie die Nummer unter dem QR-Code ein:</p>
        <input type="text" id="code-input" placeholder="z.B. EX-001" />
        <button id="submit-code" class="submit-btn">√ñffnen</button>
      </div>
    </div>

    <!-- Error Modal -->
    <div id="error-modal" class="modal error" style="display: none;">
      <div class="modal-content">
        <div class="error-icon">‚ö†Ô∏è</div>
        <h2>Ung√ºltiger QR-Code</h2>
        <p id="error-message">Dieser QR-Code geh√∂rt nicht zum Museum.</p>
        <button id="close-error" class="submit-btn">OK</button>
      </div>
    </div>
  </div>
</MobileLayout>

<style>
  .scan-page {
    background: black;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
  }

  /* Camera Container */
  .camera-container {
    position: relative;
    flex: 1;
    background: #000;
    overflow: hidden;
  }

  #camera-view {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .scan-overlay {
    position: absolute;
    inset: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    pointer-events: none;
  }

  /* Scan Frame */
  .scan-frame {
    position: relative;
    width: 250px;
    height: 250px;
    margin-bottom: 30px;
  }

  .corner {
    position: absolute;
    width: 40px;
    height: 40px;
    border: 3px solid #4CAF50;
  }

  .corner.tl {
    top: 0;
    left: 0;
    border-right: none;
    border-bottom: none;
  }

  .corner.tr {
    top: 0;
    right: 0;
    border-left: none;
    border-bottom: none;
  }

  .corner.bl {
    bottom: 0;
    left: 0;
    border-right: none;
    border-top: none;
  }

  .corner.br {
    bottom: 0;
    right: 0;
    border-left: none;
    border-top: none;
  }

  .scan-hint {
    color: white;
    text-align: center;
    font-size: 16px;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
    padding: 0 20px;
  }

  /* Scanning Animation */
  @keyframes scan {
    0%, 100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(250px);
    }
  }

  .scan-frame::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 2px;
    background: linear-gradient(90deg, transparent, #4CAF50, transparent);
    animation: scan 2s ease-in-out infinite;
  }

  /* Action Buttons */
  .scan-actions {
    display: flex;
    gap: 10px;
    padding: 20px;
    background: rgba(0, 0, 0, 0.8);
  }

  .action-btn {
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 5px;
    padding: 15px 10px;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 8px;
    color: white;
    cursor: pointer;
    transition: all 0.2s;
  }

  .action-btn:active {
    background: rgba(255, 255, 255, 0.2);
    transform: scale(0.95);
  }

  .action-btn.active {
    background: #4CAF50;
  }

  .action-btn span {
    font-size: 12px;
  }

  /* Recent Scans */
  .recent-scans {
    background: var(--color-bg);
    border-top-left-radius: var(--radius-xl);
    border-top-right-radius: var(--radius-xl);
    padding-top: var(--space-6);
  }

  .scan-item {
    display: flex;
    align-items: center;
    gap: var(--space-4);
    padding: var(--space-4);
    border-bottom: 1px solid var(--color-border);
    text-decoration: none;
    color: var(--color-primary);
    transition: var(--transition);
  }

  .scan-item:hover {
    background: var(--color-bg-alt);
  }

  .scan-item:active {
    background: var(--color-border);
  }

  .scan-item:last-child {
    border-bottom: none;
  }

  .scan-item-icon {
    font-size: var(--font-size-2xl);
    flex-shrink: 0;
  }

  .scan-item-info {
    flex: 1;
    min-width: 0;
  }

  .scan-item-title {
    font-size: var(--font-size-base);
    font-weight: var(--font-weight-semibold);
    margin: 0 0 var(--space-1) 0;
    line-height: 1.4;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  .scan-item-time {
    font-size: var(--font-size-xs);
    color: var(--color-tertiary);
  }

  /* Modal */
  .modal {
    position: fixed;
    inset: 0;
    background: rgba(0, 0, 0, 0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    padding: 20px;
  }

  .modal-content {
    background: white;
    border-radius: 12px;
    padding: 30px 20px;
    width: 100%;
    max-width: 320px;
    position: relative;
  }

  .modal-close {
    position: absolute;
    top: 10px;
    right: 10px;
    background: none;
    border: none;
    font-size: 30px;
    color: #999;
    cursor: pointer;
    width: 40px;
    height: 40px;
  }

  .modal h2 {
    font-size: 20px;
    margin-bottom: 10px;
    color: #333;
  }

  .modal p {
    font-size: 14px;
    color: #666;
    margin-bottom: 20px;
  }

  #code-input {
    width: 100%;
    padding: 12px;
    border: 1px solid #ddd;
    border-radius: 8px;
    font-size: 16px;
    margin-bottom: 20px;
    text-transform: uppercase;
  }

  .submit-btn {
    width: 100%;
    padding: 12px;
    background: #4CAF50;
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
  }

  .submit-btn:active {
    transform: scale(0.98);
  }

  /* Error Modal */
  .modal.error .modal-content {
    text-align: center;
  }

  .error-icon {
    font-size: 48px;
    margin-bottom: 15px;
  }

  /* Camera Permission */
  .permission-required {
    text-align: center;
    padding: 40px 20px;
    color: white;
  }

  .permission-required h2 {
    font-size: 24px;
    margin-bottom: 15px;
  }

  .permission-btn {
    padding: 12px 24px;
    background: #4CAF50;
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 16px;
    cursor: pointer;
  }
</style>

<script>
  // QR Code Scanner would need a library like qr-scanner
  // For now, this is a UI mockup that shows the interface
  
  let currentStream = null;
  let torchEnabled = false;
  let currentCamera = 'environment'; // 'environment' or 'user'
  
  // Initialize camera
  async function initCamera() {
    try {
      const video = document.getElementById('camera-view') as HTMLVideoElement;
      
      // Stop current stream if exists
      if (currentStream) {
        currentStream.getTracks().forEach(track => track.stop());
      }
      
      // Request camera
      currentStream = await navigator.mediaDevices.getUserMedia({
        video: { 
          facingMode: currentCamera,
          width: { ideal: 1920 },
          height: { ideal: 1080 }
        }
      });
      
      if (video) {
        video.srcObject = currentStream;
      }
      
      // Start QR scanning
      startScanning();
      
    } catch (err) {
      console.error('Camera error:', err);
      // Show permission required UI
      showPermissionRequired();
    }
  }
  
  // Mock QR scanning
  function startScanning() {
    // In production, use a QR scanner library
    // For now, simulate with periodic checks
    setInterval(() => {
      // Mock scan detection
      if (Math.random() < 0.001) { // Very low chance for demo
        handleQRCode('exhibit/mona-lisa');
      }
    }, 1000);
  }
  
  // Handle detected QR code
  function handleQRCode(data: string) {
    // Validate museum QR code
    if (data.startsWith('exhibit/') || data.startsWith('tour/') || data.startsWith('event/')) {
      // Add to recent scans
      addRecentScan(data);
      
      // Navigate to content
      window.location.href = `/mobile/${data}`;
    } else {
      showError('Dieser QR-Code geh√∂rt nicht zum Museum.');
    }
  }
  
  // Add to recent scans
  function addRecentScan(data: string) {
    let recent = JSON.parse(localStorage.getItem('recentScans') || '[]');
    
    // Add new scan
    recent.unshift({
      data: data,
      timestamp: new Date().toISOString(),
      title: getTitleFromData(data)
    });
    
    // Keep only last 10
    recent = recent.slice(0, 10);
    
    localStorage.setItem('recentScans', JSON.stringify(recent));
    updateRecentList();
  }
  
  function getTitleFromData(data: string): string {
    // Extract title from data
    const parts = data.split('/');
    const type = parts[0];
    const id = parts[1];
    
    const titles: Record<string, string> = {
      'exhibit': 'üñºÔ∏è Exponat',
      'tour': 'üéß Tour',
      'event': 'üìÖ Veranstaltung'
    };
    
    return titles[type] || 'üìÑ Inhalt';
  }
  
  // Update recent list UI
  function updateRecentList() {
    const list = document.getElementById('recent-list');
    const recent = JSON.parse(localStorage.getItem('recentScans') || '[]');
    
    if (list) {
      if (recent.length === 0) {
        list.innerHTML = `
          <div class="clean-empty">
            <div class="clean-empty-icon">üì±</div>
            <p class="clean-empty-text">Noch keine QR-Codes gescannt</p>
          </div>
        `;
      } else {
        list.innerHTML = recent.map((scan: any) => {
          const time = new Date(scan.timestamp).toLocaleTimeString('de-DE', {
            hour: '2-digit',
            minute: '2-digit'
          });
          
          return `
            <a href="/mobile/${scan.data}" class="scan-item">
              <div class="scan-item-icon">${scan.title.split(' ')[0]}</div>
              <div class="scan-item-info">
                <h3 class="scan-item-title">${scan.title}</h3>
                <div class="scan-item-time">${time}</div>
              </div>
            </a>
          `;
        }).join('');
      }
    }
  }
  
  // Show permission required
  function showPermissionRequired() {
    const container = document.querySelector('.camera-container');
    if (container) {
      container.innerHTML = `
        <div class="permission-required">
          <h2>Kamera-Zugriff erforderlich</h2>
          <p>Bitte erlauben Sie den Zugriff auf die Kamera, um QR-Codes zu scannen.</p>
          <button class="permission-btn" onclick="initCamera()">Kamera aktivieren</button>
        </div>
      `;
    }
  }
  
  // Show error modal
  function showError(message: string) {
    const errorModal = document.getElementById('error-modal');
    const errorMessage = document.getElementById('error-message');
    
    if (errorMessage) {
      errorMessage.textContent = message;
    }
    
    if (errorModal) {
      errorModal.style.display = 'flex';
    }
  }
  
  // Torch toggle
  document.getElementById('torch-btn')?.addEventListener('click', async () => {
    if (currentStream) {
      const track = currentStream.getVideoTracks()[0];
      const capabilities = track.getCapabilities() as any;
      
      if (capabilities.torch) {
        torchEnabled = !torchEnabled;
        await track.applyConstraints({
          advanced: [{ torch: torchEnabled }]
        } as any);
        
        document.getElementById('torch-btn')?.classList.toggle('active', torchEnabled);
      }
    }
  });
  
  // Switch camera
  document.getElementById('switch-camera-btn')?.addEventListener('click', () => {
    currentCamera = currentCamera === 'environment' ? 'user' : 'environment';
    initCamera();
  });
  
  // Manual code input
  document.getElementById('manual-code-btn')?.addEventListener('click', () => {
    const modal = document.getElementById('manual-modal');
    if (modal) {
      modal.style.display = 'flex';
    }
  });
  
  document.getElementById('submit-code')?.addEventListener('click', () => {
    const input = document.getElementById('code-input') as HTMLInputElement;
    if (input?.value) {
      // Convert code to URL
      const code = input.value.toUpperCase();
      
      // Map codes to content
      if (code.startsWith('EX-')) {
        handleQRCode(`exhibit/${code.toLowerCase()}`);
      } else if (code.startsWith('TR-')) {
        handleQRCode(`tour/${code.toLowerCase()}`);
      } else {
        showError('Ung√ºltiger Code');
      }
    }
  });
  
  // Close modals
  document.getElementById('close-modal')?.addEventListener('click', () => {
    const modal = document.getElementById('manual-modal');
    if (modal) {
      modal.style.display = 'none';
    }
  });
  
  document.getElementById('close-error')?.addEventListener('click', () => {
    const modal = document.getElementById('error-modal');
    if (modal) {
      modal.style.display = 'none';
    }
  });
  
  // Initialize on load
  initCamera();
  updateRecentList();
</script>