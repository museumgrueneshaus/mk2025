---
export interface Props {
  images: {
    url: string;
    alt?: string;
    duration?: number;
  }[];
  transition?: 'fade' | 'slide' | 'zoom';
  autoplay?: boolean;
  controls?: boolean;
}

const { 
  images, 
  transition = 'fade', 
  autoplay = true,
  controls = false 
} = Astro.props;
---

<div class="slideshow-container" data-autoplay={autoplay}>
  <div class="slides">
    {images.map((image, index) => (
      <div 
        class="slide" 
        data-index={index}
        data-duration={image.duration || 5000}
        style={index === 0 ? '' : 'display: none;'}
      >
        <img 
          src={image.url} 
          alt={image.alt || `Slide ${index + 1}`}
          loading={index === 0 ? 'eager' : 'lazy'}
        />
      </div>
    ))}
  </div>
  
  {controls && (
    <div class="controls">
      <button class="prev" aria-label="Vorheriges Bild">‹</button>
      <button class="next" aria-label="Nächstes Bild">›</button>
    </div>
  )}
  
  <div class="indicators">
    {images.map((_, index) => (
      <span 
        class="dot" 
        data-slide={index}
        class={index === 0 ? 'active' : ''}
      />
    ))}
  </div>
</div>

<style>
  .slideshow-container {
    position: relative;
    width: 100%;
    height: 100vh;
    overflow: hidden;
    background: #000;
  }
  
  .slides {
    width: 100%;
    height: 100%;
  }
  
  .slide {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    opacity: 0;
    transition: opacity 1s ease-in-out;
  }
  
  .slide[style*="display: block"] {
    opacity: 1;
  }
  
  .slide img {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
  }
  
  .controls {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 100%;
    display: flex;
    justify-content: space-between;
    padding: 0 20px;
    pointer-events: none;
  }
  
  .controls button {
    pointer-events: all;
    background: rgba(255, 255, 255, 0.2);
    border: none;
    color: white;
    font-size: 60px;
    padding: 10px 20px;
    cursor: pointer;
    border-radius: 5px;
    transition: background 0.3s;
  }
  
  .controls button:hover {
    background: rgba(255, 255, 255, 0.4);
  }
  
  .indicators {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 10px;
  }
  
  .dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.5);
    cursor: pointer;
    transition: background 0.3s;
  }
  
  .dot.active {
    background: white;
  }
</style>

<script>
  const container = document.querySelector('.slideshow-container');
  const slides = container.querySelectorAll('.slide');
  const dots = container.querySelectorAll('.dot');
  const prevBtn = container.querySelector('.prev');
  const nextBtn = container.querySelector('.next');
  
  let currentIndex = 0;
  let intervalId;
  
  function showSlide(index) {
    slides.forEach((slide, i) => {
      slide.style.display = i === index ? 'block' : 'none';
      dots[i]?.classList.toggle('active', i === index);
    });
    currentIndex = index;
  }
  
  function nextSlide() {
    const nextIndex = (currentIndex + 1) % slides.length;
    showSlide(nextIndex);
  }
  
  function prevSlide() {
    const prevIndex = (currentIndex - 1 + slides.length) % slides.length;
    showSlide(prevIndex);
  }
  
  function startAutoplay() {
    if (container.dataset.autoplay === 'true') {
      const duration = slides[currentIndex].dataset.duration || 5000;
      intervalId = setTimeout(() => {
        nextSlide();
        startAutoplay();
      }, duration);
    }
  }
  
  function stopAutoplay() {
    clearTimeout(intervalId);
  }
  
  // Event Listeners
  prevBtn?.addEventListener('click', () => {
    stopAutoplay();
    prevSlide();
    startAutoplay();
  });
  
  nextBtn?.addEventListener('click', () => {
    stopAutoplay();
    nextSlide();
    startAutoplay();
  });
  
  dots.forEach((dot, index) => {
    dot.addEventListener('click', () => {
      stopAutoplay();
      showSlide(index);
      startAutoplay();
    });
  });
  
  // Touch support for swipe
  let touchStartX = 0;
  let touchEndX = 0;
  
  container.addEventListener('touchstart', e => {
    touchStartX = e.changedTouches[0].screenX;
  });
  
  container.addEventListener('touchend', e => {
    touchEndX = e.changedTouches[0].screenX;
    handleSwipe();
  });
  
  function handleSwipe() {
    if (touchEndX < touchStartX - 50) {
      stopAutoplay();
      nextSlide();
      startAutoplay();
    }
    if (touchEndX > touchStartX + 50) {
      stopAutoplay();
      prevSlide();
      startAutoplay();
    }
  }
  
  // Start
  startAutoplay();
</script>